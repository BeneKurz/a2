# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations

"""
This file contains the exact signatures for all functions in module
QtNetwork, except for defaults which are replaced by "...".
"""

# Module `QtNetwork`

from a2qt import QtCore, QtNetwork

import enum
from typing import (
    Any,
    Callable,
    Optional,
    Tuple,
    Type,
    Union,
    Sequence,
    Dict,
    List,
    OrderedDict,
    overload,
)
from shiboken6 import Shiboken

class QAbstractNetworkCache(QtCore.QObject):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def cacheSize(self) -> int: ...
    def clear(self) -> None: ...
    def data(self, url: Union[QtCore.QUrl, str]) -> QtCore.QIODevice: ...
    def insert(self, device: QtCore.QIODevice) -> None: ...
    def metaData(self, url: Union[QtCore.QUrl, str]) -> QtNetwork.QNetworkCacheMetaData: ...
    def prepare(self, metaData: QtNetwork.QNetworkCacheMetaData) -> QtCore.QIODevice: ...
    def remove(self, url: Union[QtCore.QUrl, str]) -> bool: ...
    def updateMetaData(self, metaData: QtNetwork.QNetworkCacheMetaData) -> None: ...

class QAbstractSocket(QtCore.QIODevice):
    class BindFlag(enum.Flag):

        DefaultForPlatform: QAbstractSocket.BindFlag  # 0x0
        ShareAddress: QAbstractSocket.BindFlag = ...  # 0x1
        DontShareAddress: QAbstractSocket.BindFlag = ...  # 0x2
        ReuseAddressHint: QAbstractSocket.BindFlag = ...  # 0x4
    class NetworkLayerProtocol(enum.Enum):

        UnknownNetworkLayerProtocol: QAbstractSocket.NetworkLayerProtocol = ...  # -0x1
        IPv4Protocol: QAbstractSocket.NetworkLayerProtocol = ...  # 0x0
        IPv6Protocol: QAbstractSocket.NetworkLayerProtocol = ...  # 0x1
        AnyIPProtocol: QAbstractSocket.NetworkLayerProtocol = ...  # 0x2
    class PauseMode(enum.Flag):

        PauseNever: QAbstractSocket.PauseMode = ...  # 0x0
        PauseOnSslErrors: QAbstractSocket.PauseMode = ...  # 0x1
    class SocketError(enum.Enum):

        UnknownSocketError: QAbstractSocket.SocketError = ...  # -0x1
        ConnectionRefusedError: QAbstractSocket.SocketError = ...  # 0x0
        RemoteHostClosedError: QAbstractSocket.SocketError = ...  # 0x1
        HostNotFoundError: QAbstractSocket.SocketError = ...  # 0x2
        SocketAccessError: QAbstractSocket.SocketError = ...  # 0x3
        SocketResourceError: QAbstractSocket.SocketError = ...  # 0x4
        SocketTimeoutError: QAbstractSocket.SocketError = ...  # 0x5
        DatagramTooLargeError: QAbstractSocket.SocketError = ...  # 0x6
        NetworkError: QAbstractSocket.SocketError = ...  # 0x7
        AddressInUseError: QAbstractSocket.SocketError = ...  # 0x8
        SocketAddressNotAvailableError: QAbstractSocket.SocketError = ...  # 0x9
        UnsupportedSocketOperationError: QAbstractSocket.SocketError = ...  # 0xa
        UnfinishedSocketOperationError: QAbstractSocket.SocketError = ...  # 0xb
        ProxyAuthenticationRequiredError: QAbstractSocket.SocketError = ...  # 0xc
        SslHandshakeFailedError: QAbstractSocket.SocketError = ...  # 0xd
        ProxyConnectionRefusedError: QAbstractSocket.SocketError = ...  # 0xe
        ProxyConnectionClosedError: QAbstractSocket.SocketError = ...  # 0xf
        ProxyConnectionTimeoutError: QAbstractSocket.SocketError = ...  # 0x10
        ProxyNotFoundError: QAbstractSocket.SocketError = ...  # 0x11
        ProxyProtocolError: QAbstractSocket.SocketError = ...  # 0x12
        OperationError: QAbstractSocket.SocketError = ...  # 0x13
        SslInternalError: QAbstractSocket.SocketError = ...  # 0x14
        SslInvalidUserDataError: QAbstractSocket.SocketError = ...  # 0x15
        TemporaryError: QAbstractSocket.SocketError = ...  # 0x16
    class SocketOption(enum.Enum):

        LowDelayOption: QAbstractSocket.SocketOption = ...  # 0x0
        KeepAliveOption: QAbstractSocket.SocketOption = ...  # 0x1
        MulticastTtlOption: QAbstractSocket.SocketOption = ...  # 0x2
        MulticastLoopbackOption: QAbstractSocket.SocketOption = ...  # 0x3
        TypeOfServiceOption: QAbstractSocket.SocketOption = ...  # 0x4
        SendBufferSizeSocketOption: QAbstractSocket.SocketOption = ...  # 0x5
        ReceiveBufferSizeSocketOption: QAbstractSocket.SocketOption = ...  # 0x6
        PathMtuSocketOption: QAbstractSocket.SocketOption = ...  # 0x7
    class SocketState(enum.Enum):

        UnconnectedState: QAbstractSocket.SocketState = ...  # 0x0
        HostLookupState: QAbstractSocket.SocketState = ...  # 0x1
        ConnectingState: QAbstractSocket.SocketState = ...  # 0x2
        ConnectedState: QAbstractSocket.SocketState = ...  # 0x3
        BoundState: QAbstractSocket.SocketState = ...  # 0x4
        ListeningState: QAbstractSocket.SocketState = ...  # 0x5
        ClosingState: QAbstractSocket.SocketState = ...  # 0x6
    class SocketType(enum.Enum):

        UnknownSocketType: QAbstractSocket.SocketType = ...  # -0x1
        TcpSocket: QAbstractSocket.SocketType = ...  # 0x0
        UdpSocket: QAbstractSocket.SocketType = ...  # 0x1
        SctpSocket: QAbstractSocket.SocketType = ...  # 0x2
    def __init__(
        self, socketType: QtNetwork.QAbstractSocket.SocketType, parent: QtCore.QObject
    ) -> None: ...
    def abort(self) -> None: ...
    @overload
    def bind(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int = ...,
        mode: QtNetwork.QAbstractSocket.BindFlag = ...,
    ) -> bool: ...
    @overload
    def bind(self, port: int = ..., mode: QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def close(self) -> None: ...
    @overload
    def connectToHost(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    @overload
    def connectToHost(
        self,
        hostName: str,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    def disconnectFromHost(self) -> None: ...
    def error(self) -> QtNetwork.QAbstractSocket.SocketError: ...
    def flush(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def isValid(self) -> bool: ...
    def localAddress(self) -> QtNetwork.QHostAddress: ...
    def localPort(self) -> int: ...
    def pauseMode(self) -> QtNetwork.QAbstractSocket.PauseMode: ...
    def peerAddress(self) -> QtNetwork.QHostAddress: ...
    def peerName(self) -> str: ...
    def peerPort(self) -> int: ...
    def protocolTag(self) -> str: ...
    def proxy(self) -> QtNetwork.QNetworkProxy: ...
    def readBufferSize(self) -> int: ...
    def readData(self, maxlen: int) -> object: ...
    def readLineData(self, maxlen: int) -> object: ...
    def resume(self) -> None: ...
    def setLocalAddress(
        self, address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def setLocalPort(self, port: int) -> None: ...
    def setPauseMode(self, pauseMode: QtNetwork.QAbstractSocket.PauseMode) -> None: ...
    def setPeerAddress(
        self, address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def setPeerName(self, name: str) -> None: ...
    def setPeerPort(self, port: int) -> None: ...
    def setProtocolTag(self, tag: str) -> None: ...
    def setProxy(
        self, networkProxy: Union[QtNetwork.QNetworkProxy, QtNetwork.QNetworkProxy.ProxyType]
    ) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: int,
        state: QtNetwork.QAbstractSocket.SocketState = ...,
        openMode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    def setSocketError(self, socketError: QtNetwork.QAbstractSocket.SocketError) -> None: ...
    def setSocketOption(
        self, option: QtNetwork.QAbstractSocket.SocketOption, value: Any
    ) -> None: ...
    def setSocketState(self, state: QtNetwork.QAbstractSocket.SocketState) -> None: ...
    def skipData(self, maxSize: int) -> int: ...
    def socketDescriptor(self) -> int: ...
    def socketOption(self, option: QtNetwork.QAbstractSocket.SocketOption) -> Any: ...
    def socketType(self) -> QtNetwork.QAbstractSocket.SocketType: ...
    def state(self) -> QtNetwork.QAbstractSocket.SocketState: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, data: bytes, len: int) -> int: ...

class QAuthenticator(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QAuthenticator) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def isNull(self) -> bool: ...
    def option(self, opt: str) -> Any: ...
    def options(self) -> Dict[str, Any]: ...
    def password(self) -> str: ...
    def realm(self) -> str: ...
    def setOption(self, opt: str, value: Any) -> None: ...
    def setPassword(self, password: str) -> None: ...
    def setRealm(self, realm: str) -> None: ...
    def setUser(self, user: str) -> None: ...
    def user(self) -> str: ...

class QDnsDomainNameRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QDnsDomainNameRecord) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def name(self) -> str: ...
    def swap(self, other: QtNetwork.QDnsDomainNameRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def value(self) -> str: ...

class QDnsHostAddressRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QDnsHostAddressRecord) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def name(self) -> str: ...
    def swap(self, other: QtNetwork.QDnsHostAddressRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def value(self) -> QtNetwork.QHostAddress: ...

class QDnsLookup(QtCore.QObject):
    class Error(enum.Enum):

        NoError: QDnsLookup.Error = ...  # 0x0
        ResolverError: QDnsLookup.Error = ...  # 0x1
        OperationCancelledError: QDnsLookup.Error = ...  # 0x2
        InvalidRequestError: QDnsLookup.Error = ...  # 0x3
        InvalidReplyError: QDnsLookup.Error = ...  # 0x4
        ServerFailureError: QDnsLookup.Error = ...  # 0x5
        ServerRefusedError: QDnsLookup.Error = ...  # 0x6
        NotFoundError: QDnsLookup.Error = ...  # 0x7
    class Type(enum.Enum):

        A: QDnsLookup.Type = ...  # 0x1
        NS: QDnsLookup.Type = ...  # 0x2
        CNAME: QDnsLookup.Type = ...  # 0x5
        PTR: QDnsLookup.Type = ...  # 0xc
        MX: QDnsLookup.Type = ...  # 0xf
        TXT: QDnsLookup.Type = ...  # 0x10
        AAAA: QDnsLookup.Type = ...  # 0x1c
        SRV: QDnsLookup.Type = ...  # 0x21
        ANY: QDnsLookup.Type = ...  # 0xff
    @overload
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(
        self,
        type: QtNetwork.QDnsLookup.Type,
        name: str,
        nameserver: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        parent: Optional[QtCore.QObject] = ...,
    ) -> None: ...
    @overload
    def __init__(
        self, type: QtNetwork.QDnsLookup.Type, name: str, parent: Optional[QtCore.QObject] = ...
    ) -> None: ...
    def abort(self) -> None: ...
    def canonicalNameRecords(self) -> List[QtNetwork.QDnsDomainNameRecord]: ...
    def error(self) -> QtNetwork.QDnsLookup.Error: ...
    def errorString(self) -> str: ...
    def hostAddressRecords(self) -> List[QtNetwork.QDnsHostAddressRecord]: ...
    def isFinished(self) -> bool: ...
    def lookup(self) -> None: ...
    def mailExchangeRecords(self) -> List[QtNetwork.QDnsMailExchangeRecord]: ...
    def name(self) -> str: ...
    def nameServerRecords(self) -> List[QtNetwork.QDnsDomainNameRecord]: ...
    def nameserver(self) -> QtNetwork.QHostAddress: ...
    def pointerRecords(self) -> List[QtNetwork.QDnsDomainNameRecord]: ...
    def serviceRecords(self) -> List[QtNetwork.QDnsServiceRecord]: ...
    def setName(self, name: str) -> None: ...
    def setNameserver(
        self, nameserver: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def setType(self, arg__1: QtNetwork.QDnsLookup.Type) -> None: ...
    def textRecords(self) -> List[QtNetwork.QDnsTextRecord]: ...
    def type(self) -> QtNetwork.QDnsLookup.Type: ...

class QDnsMailExchangeRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QDnsMailExchangeRecord) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def exchange(self) -> str: ...
    def name(self) -> str: ...
    def preference(self) -> int: ...
    def swap(self, other: QtNetwork.QDnsMailExchangeRecord) -> None: ...
    def timeToLive(self) -> int: ...

class QDnsServiceRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QDnsServiceRecord) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def name(self) -> str: ...
    def port(self) -> int: ...
    def priority(self) -> int: ...
    def swap(self, other: QtNetwork.QDnsServiceRecord) -> None: ...
    def target(self) -> str: ...
    def timeToLive(self) -> int: ...
    def weight(self) -> int: ...

class QDnsTextRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QDnsTextRecord) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def name(self) -> str: ...
    def swap(self, other: QtNetwork.QDnsTextRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def values(self) -> List[QtCore.QByteArray]: ...

class QDtls(QtCore.QObject):
    class HandshakeState(enum.Enum):

        HandshakeNotStarted: QDtls.HandshakeState = ...  # 0x0
        HandshakeInProgress: QDtls.HandshakeState = ...  # 0x1
        PeerVerificationFailed: QDtls.HandshakeState = ...  # 0x2
        HandshakeComplete: QDtls.HandshakeState = ...  # 0x3
    def __init__(
        self, mode: QtNetwork.QSslSocket.SslMode, parent: Optional[QtCore.QObject] = ...
    ) -> None: ...
    def abortHandshake(self, socket: QtNetwork.QUdpSocket) -> bool: ...
    def decryptDatagram(
        self, socket: QtNetwork.QUdpSocket, dgram: Union[QtCore.QByteArray, bytes]
    ) -> QtCore.QByteArray: ...
    def doHandshake(
        self, socket: QtNetwork.QUdpSocket, dgram: Union[QtCore.QByteArray, bytes] = ...
    ) -> bool: ...
    def dtlsConfiguration(self) -> QtNetwork.QSslConfiguration: ...
    def dtlsError(self) -> QtNetwork.QDtlsError: ...
    def dtlsErrorString(self) -> str: ...
    def handleTimeout(self, socket: QtNetwork.QUdpSocket) -> bool: ...
    def handshakeState(self) -> QtNetwork.QDtls.HandshakeState: ...
    def ignoreVerificationErrors(self, errorsToIgnore: Sequence[QtNetwork.QSslError]) -> None: ...
    def isConnectionEncrypted(self) -> bool: ...
    def mtuHint(self) -> int: ...
    def peerAddress(self) -> QtNetwork.QHostAddress: ...
    def peerPort(self) -> int: ...
    def peerVerificationErrors(self) -> List[QtNetwork.QSslError]: ...
    def peerVerificationName(self) -> str: ...
    def resumeHandshake(self, socket: QtNetwork.QUdpSocket) -> bool: ...
    def sessionCipher(self) -> QtNetwork.QSslCipher: ...
    def sessionProtocol(self) -> QtNetwork.QSsl.SslProtocol: ...
    def setDtlsConfiguration(self, configuration: QtNetwork.QSslConfiguration) -> bool: ...
    def setMtuHint(self, mtuHint: int) -> None: ...
    def setPeer(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int,
        verificationName: str = ...,
    ) -> bool: ...
    def setPeerVerificationName(self, name: str) -> bool: ...
    def shutdown(self, socket: QtNetwork.QUdpSocket) -> bool: ...
    def sslMode(self) -> QtNetwork.QSslSocket.SslMode: ...
    def writeDatagramEncrypted(
        self, socket: QtNetwork.QUdpSocket, dgram: Union[QtCore.QByteArray, bytes]
    ) -> int: ...

class QDtlsClientVerifier(QtCore.QObject):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def dtlsError(self) -> QtNetwork.QDtlsError: ...
    def dtlsErrorString(self) -> str: ...
    def verifiedHello(self) -> QtCore.QByteArray: ...
    def verifyClient(
        self,
        socket: QtNetwork.QUdpSocket,
        dgram: Union[QtCore.QByteArray, bytes],
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int,
    ) -> bool: ...

class QDtlsError(enum.Enum):

    NoError: QDtlsError = ...  # 0x0
    InvalidInputParameters: QDtlsError = ...  # 0x1
    InvalidOperation: QDtlsError = ...  # 0x2
    UnderlyingSocketError: QDtlsError = ...  # 0x3
    RemoteClosedConnectionError: QDtlsError = ...  # 0x4
    PeerVerificationError: QDtlsError = ...  # 0x5
    TlsInitializationError: QDtlsError = ...  # 0x6
    TlsFatalError: QDtlsError = ...  # 0x7
    TlsNonFatalError: QDtlsError = ...  # 0x8

class QHostAddress(Shiboken.Object):

    UnknownNetworkLayerProtocol: QAbstractSocket.NetworkLayerProtocol = ...  # -0x1
    IPv4Protocol: QAbstractSocket.NetworkLayerProtocol = ...  # 0x0
    IPv6Protocol: QAbstractSocket.NetworkLayerProtocol = ...  # 0x1
    AnyIPProtocol: QAbstractSocket.NetworkLayerProtocol = ...  # 0x2
    class ConversionModeFlag(enum.Flag):

        StrictConversion: QHostAddress.ConversionModeFlag = ...  # 0x0
        ConvertV4MappedToIPv4: QHostAddress.ConversionModeFlag = ...  # 0x1
        ConvertV4CompatToIPv4: QHostAddress.ConversionModeFlag = ...  # 0x2
        ConvertUnspecifiedAddress: QHostAddress.ConversionModeFlag = ...  # 0x4
        ConvertLocalHost: QHostAddress.ConversionModeFlag = ...  # 0x8
        TolerantConversion: QHostAddress.ConversionModeFlag = ...  # 0xff
    class SpecialAddress(enum.Enum):

        Null: QHostAddress.SpecialAddress = ...  # 0x0
        Broadcast: QHostAddress.SpecialAddress = ...  # 0x1
        LocalHost: QHostAddress.SpecialAddress = ...  # 0x2
        LocalHostIPv6: QHostAddress.SpecialAddress = ...  # 0x3
        Any: QHostAddress.SpecialAddress = ...  # 0x4
        AnyIPv6: QHostAddress.SpecialAddress = ...  # 0x5
        AnyIPv4: QHostAddress.SpecialAddress = ...  # 0x6
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, address: QtNetwork.QHostAddress.SpecialAddress) -> None: ...
    @overload
    def __init__(self, address: str) -> None: ...
    @overload
    def __init__(
        self, copy: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    @overload
    def __init__(self, ip4Addr: int) -> None: ...
    @overload
    def __init__(self, ip6Addr: QtNetwork.QIPv6Address) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, arg__1: QtCore.QDataStream) -> QtCore.QDataStream: ...
    def __rshift__(self, arg__1: QtCore.QDataStream) -> QtCore.QDataStream: ...
    def clear(self) -> None: ...
    def isBroadcast(self) -> bool: ...
    def isEqual(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        mode: QtNetwork.QHostAddress.ConversionModeFlag = ...,
    ) -> bool: ...
    def isGlobal(self) -> bool: ...
    @overload
    def isInSubnet(self, subnet: Tuple[QtNetwork.QHostAddress, int]) -> bool: ...
    @overload
    def isInSubnet(
        self,
        subnet: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        netmask: int,
    ) -> bool: ...
    def isLinkLocal(self) -> bool: ...
    def isLoopback(self) -> bool: ...
    def isMulticast(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSiteLocal(self) -> bool: ...
    def isUniqueLocalUnicast(self) -> bool: ...
    @staticmethod
    def parseSubnet(subnet: str) -> Tuple[QtNetwork.QHostAddress, int]: ...
    def protocol(self) -> QtNetwork.QAbstractSocket.NetworkLayerProtocol: ...
    def scopeId(self) -> str: ...
    @overload
    def setAddress(self, address: QtNetwork.QHostAddress.SpecialAddress) -> None: ...
    @overload
    def setAddress(self, address: str) -> bool: ...
    @overload
    def setAddress(self, ip4Addr: int) -> None: ...
    @overload
    def setAddress(self, ip6Addr: QtNetwork.QIPv6Address) -> None: ...
    def setScopeId(self, id: str) -> None: ...
    def swap(
        self, other: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def toIPv4Address(self) -> Tuple[int, bool]: ...
    def toIPv6Address(self) -> QtNetwork.QIPv6Address: ...
    def toString(self) -> str: ...

class QHostInfo(Shiboken.Object):
    class HostInfoError(enum.Enum):

        NoError: QHostInfo.HostInfoError = ...  # 0x0
        HostNotFound: QHostInfo.HostInfoError = ...  # 0x1
        UnknownError: QHostInfo.HostInfoError = ...  # 0x2
    @overload
    def __init__(self, d: Union[QtNetwork.QHostInfo, int]) -> None: ...
    @overload
    def __init__(self, lookupId: int = ...) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def abortHostLookup(lookupId: int) -> None: ...
    def addresses(self) -> List[QtNetwork.QHostAddress]: ...
    def error(self) -> QtNetwork.QHostInfo.HostInfoError: ...
    def errorString(self) -> str: ...
    @staticmethod
    def fromName(name: str) -> QtNetwork.QHostInfo: ...
    def hostName(self) -> str: ...
    @staticmethod
    def localDomainName() -> str: ...
    @staticmethod
    def localHostName() -> str: ...
    @overload
    @staticmethod
    def lookupHost(name: str, receiver: QtCore.QObject, member: bytes) -> int: ...
    @overload
    def lookupHost(self, arg__1: str, arg__2: Callable) -> None: ...
    def lookupId(self) -> int: ...
    def setAddresses(self, addresses: Sequence[QtNetwork.QHostAddress]) -> None: ...
    def setError(self, error: QtNetwork.QHostInfo.HostInfoError) -> None: ...
    def setErrorString(self, errorString: str) -> None: ...
    def setHostName(self, name: str) -> None: ...
    def setLookupId(self, id: int) -> None: ...
    def swap(self, other: Union[QtNetwork.QHostInfo, int]) -> None: ...

class QHstsPolicy(Shiboken.Object):
    class PolicyFlag(enum.Flag):

        IncludeSubDomains: QHstsPolicy.PolicyFlag = ...  # 0x1
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        expiry: QtCore.QDateTime,
        flags: QtNetwork.QHstsPolicy.PolicyFlag,
        host: str,
        mode: QtCore.QUrl.ParsingMode = ...,
    ) -> None: ...
    @overload
    def __init__(self, rhs: QtNetwork.QHstsPolicy) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def expiry(self) -> QtCore.QDateTime: ...
    def host(self, options: QtCore.QUrl.ComponentFormattingOption = ...) -> str: ...
    def includesSubDomains(self) -> bool: ...
    def isExpired(self) -> bool: ...
    def setExpiry(self, expiry: QtCore.QDateTime) -> None: ...
    def setHost(self, host: str, mode: QtCore.QUrl.ParsingMode = ...) -> None: ...
    def setIncludesSubDomains(self, include: bool) -> None: ...
    def swap(self, other: QtNetwork.QHstsPolicy) -> None: ...

class QHttp2Configuration(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QHttp2Configuration) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def huffmanCompressionEnabled(self) -> bool: ...
    def maxFrameSize(self) -> int: ...
    def serverPushEnabled(self) -> bool: ...
    def sessionReceiveWindowSize(self) -> int: ...
    def setHuffmanCompressionEnabled(self, enable: bool) -> None: ...
    def setMaxFrameSize(self, size: int) -> bool: ...
    def setServerPushEnabled(self, enable: bool) -> None: ...
    def setSessionReceiveWindowSize(self, size: int) -> bool: ...
    def setStreamReceiveWindowSize(self, size: int) -> bool: ...
    def streamReceiveWindowSize(self) -> int: ...
    def swap(self, other: QtNetwork.QHttp2Configuration) -> None: ...

class QHttpMultiPart(QtCore.QObject):
    class ContentType(enum.Enum):

        MixedType: QHttpMultiPart.ContentType = ...  # 0x0
        RelatedType: QHttpMultiPart.ContentType = ...  # 0x1
        FormDataType: QHttpMultiPart.ContentType = ...  # 0x2
        AlternativeType: QHttpMultiPart.ContentType = ...  # 0x3
    @overload
    def __init__(
        self,
        contentType: QtNetwork.QHttpMultiPart.ContentType,
        parent: Optional[QtCore.QObject] = ...,
    ) -> None: ...
    @overload
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def append(self, httpPart: QtNetwork.QHttpPart) -> None: ...
    def boundary(self) -> QtCore.QByteArray: ...
    def setBoundary(self, boundary: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setContentType(self, contentType: QtNetwork.QHttpMultiPart.ContentType) -> None: ...

class QHttpPart(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QHttpPart) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def setBody(self, body: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setBodyDevice(self, device: QtCore.QIODevice) -> None: ...
    def setHeader(self, header: QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None: ...
    def setRawHeader(
        self,
        headerName: Union[QtCore.QByteArray, bytes],
        headerValue: Union[QtCore.QByteArray, bytes],
    ) -> None: ...
    def swap(self, other: QtNetwork.QHttpPart) -> None: ...

class QIPv6Address(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QIPv6Address: QtNetwork.QIPv6Address) -> None: ...
    @staticmethod
    def __copy__() -> None: ...

class QIntList(object): ...

class QLocalServer(QtCore.QObject):
    class SocketOption(enum.Flag):

        NoOptions: QLocalServer.SocketOption = ...  # 0x0
        UserAccessOption: QLocalServer.SocketOption = ...  # 0x1
        GroupAccessOption: QLocalServer.SocketOption = ...  # 0x2
        OtherAccessOption: QLocalServer.SocketOption = ...  # 0x4
        WorldAccessOption: QLocalServer.SocketOption = ...  # 0x7
        AbstractNamespaceOption: QLocalServer.SocketOption = ...  # 0x8
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def close(self) -> None: ...
    def errorString(self) -> str: ...
    def fullServerName(self) -> str: ...
    def hasPendingConnections(self) -> bool: ...
    def incomingConnection(self, socketDescriptor: int) -> None: ...
    def isListening(self) -> bool: ...
    @overload
    def listen(self, name: str) -> bool: ...
    @overload
    def listen(self, socketDescriptor: int) -> bool: ...
    def listenBacklogSize(self) -> int: ...
    def maxPendingConnections(self) -> int: ...
    def nextPendingConnection(self) -> QtNetwork.QLocalSocket: ...
    @staticmethod
    def removeServer(name: str) -> bool: ...
    def serverError(self) -> QtNetwork.QAbstractSocket.SocketError: ...
    def serverName(self) -> str: ...
    def setListenBacklogSize(self, size: int) -> None: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def setSocketOptions(self, options: QtNetwork.QLocalServer.SocketOption) -> None: ...
    def socketDescriptor(self) -> int: ...
    def socketOptions(self) -> QtNetwork.QLocalServer.SocketOption: ...
    def waitForNewConnection(self, msec: int) -> Tuple: ...

class QLocalSocket(QtCore.QIODevice):
    class LocalSocketError(enum.Enum):

        UnknownSocketError: QLocalSocket.LocalSocketError = ...  # -0x1
        ConnectionRefusedError: QLocalSocket.LocalSocketError = ...  # 0x0
        PeerClosedError: QLocalSocket.LocalSocketError = ...  # 0x1
        ServerNotFoundError: QLocalSocket.LocalSocketError = ...  # 0x2
        SocketAccessError: QLocalSocket.LocalSocketError = ...  # 0x3
        SocketResourceError: QLocalSocket.LocalSocketError = ...  # 0x4
        SocketTimeoutError: QLocalSocket.LocalSocketError = ...  # 0x5
        DatagramTooLargeError: QLocalSocket.LocalSocketError = ...  # 0x6
        ConnectionError: QLocalSocket.LocalSocketError = ...  # 0x7
        UnsupportedSocketOperationError: QLocalSocket.LocalSocketError = ...  # 0xa
        OperationError: QLocalSocket.LocalSocketError = ...  # 0x13
    class LocalSocketState(enum.Enum):

        UnconnectedState: QLocalSocket.LocalSocketState = ...  # 0x0
        ConnectingState: QLocalSocket.LocalSocketState = ...  # 0x2
        ConnectedState: QLocalSocket.LocalSocketState = ...  # 0x3
        ClosingState: QLocalSocket.LocalSocketState = ...  # 0x6
    class SocketOption(enum.Flag):

        NoOptions: QLocalSocket.SocketOption = ...  # 0x0
        AbstractNamespaceOption: QLocalSocket.SocketOption = ...  # 0x1
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def abort(self) -> None: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self) -> None: ...
    @overload
    def connectToServer(
        self, name: str, openMode: QtCore.QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...
    @overload
    def connectToServer(self, openMode: QtCore.QIODeviceBase.OpenModeFlag = ...) -> None: ...
    def disconnectFromServer(self) -> None: ...
    def error(self) -> QtNetwork.QLocalSocket.LocalSocketError: ...
    def flush(self) -> bool: ...
    def fullServerName(self) -> str: ...
    def isSequential(self) -> bool: ...
    def isValid(self) -> bool: ...
    def open(self, openMode: QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def readBufferSize(self) -> int: ...
    def readData(self, arg__2: int) -> object: ...
    def readLineData(self, maxSize: int) -> object: ...
    def serverName(self) -> str: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setServerName(self, name: str) -> None: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: int,
        socketState: QtNetwork.QLocalSocket.LocalSocketState = ...,
        openMode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    def setSocketOptions(self, option: QtNetwork.QLocalSocket.SocketOption) -> None: ...
    def skipData(self, maxSize: int) -> int: ...
    def socketDescriptor(self) -> int: ...
    def socketOptions(self) -> QtNetwork.QLocalSocket.SocketOption: ...
    def state(self) -> QtNetwork.QLocalSocket.LocalSocketState: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, arg__1: bytes, arg__2: int) -> int: ...

class QNetworkAccessManager(QtCore.QObject):
    class Operation(enum.Enum):

        UnknownOperation: QNetworkAccessManager.Operation = ...  # 0x0
        HeadOperation: QNetworkAccessManager.Operation = ...  # 0x1
        GetOperation: QNetworkAccessManager.Operation = ...  # 0x2
        PutOperation: QNetworkAccessManager.Operation = ...  # 0x3
        PostOperation: QNetworkAccessManager.Operation = ...  # 0x4
        DeleteOperation: QNetworkAccessManager.Operation = ...  # 0x5
        CustomOperation: QNetworkAccessManager.Operation = ...  # 0x6
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def addStrictTransportSecurityHosts(
        self, knownHosts: Sequence[QtNetwork.QHstsPolicy]
    ) -> None: ...
    def autoDeleteReplies(self) -> bool: ...
    def cache(self) -> QtNetwork.QAbstractNetworkCache: ...
    def clearAccessCache(self) -> None: ...
    def clearConnectionCache(self) -> None: ...
    def connectToHost(self, hostName: str, port: int = ...) -> None: ...
    @overload
    def connectToHostEncrypted(
        self, hostName: str, port: int, sslConfiguration: QtNetwork.QSslConfiguration, peerName: str
    ) -> None: ...
    @overload
    def connectToHostEncrypted(
        self, hostName: str, port: int = ..., sslConfiguration: QtNetwork.QSslConfiguration = ...
    ) -> None: ...
    def cookieJar(self) -> QtNetwork.QNetworkCookieJar: ...
    def createRequest(
        self,
        op: QtNetwork.QNetworkAccessManager.Operation,
        request: QtNetwork.QNetworkRequest,
        outgoingData: Optional[QtCore.QIODevice] = ...,
    ) -> QtNetwork.QNetworkReply: ...
    def deleteResource(self, request: QtNetwork.QNetworkRequest) -> QtNetwork.QNetworkReply: ...
    def enableStrictTransportSecurityStore(self, enabled: bool, storeDir: str = ...) -> None: ...
    def get(self, request: QtNetwork.QNetworkRequest) -> QtNetwork.QNetworkReply: ...
    def head(self, request: QtNetwork.QNetworkRequest) -> QtNetwork.QNetworkReply: ...
    def isStrictTransportSecurityEnabled(self) -> bool: ...
    def isStrictTransportSecurityStoreEnabled(self) -> bool: ...
    @overload
    def post(
        self, request: QtNetwork.QNetworkRequest, data: QtCore.QIODevice
    ) -> QtNetwork.QNetworkReply: ...
    @overload
    def post(
        self, request: QtNetwork.QNetworkRequest, data: Union[QtCore.QByteArray, bytes]
    ) -> QtNetwork.QNetworkReply: ...
    @overload
    def post(
        self, request: QtNetwork.QNetworkRequest, multiPart: QtNetwork.QHttpMultiPart
    ) -> QtNetwork.QNetworkReply: ...
    def proxy(self) -> QtNetwork.QNetworkProxy: ...
    def proxyFactory(self) -> QtNetwork.QNetworkProxyFactory: ...
    @overload
    def put(
        self, request: QtNetwork.QNetworkRequest, data: QtCore.QIODevice
    ) -> QtNetwork.QNetworkReply: ...
    @overload
    def put(
        self, request: QtNetwork.QNetworkRequest, data: Union[QtCore.QByteArray, bytes]
    ) -> QtNetwork.QNetworkReply: ...
    @overload
    def put(
        self, request: QtNetwork.QNetworkRequest, multiPart: QtNetwork.QHttpMultiPart
    ) -> QtNetwork.QNetworkReply: ...
    def redirectPolicy(self) -> QtNetwork.QNetworkRequest.RedirectPolicy: ...
    @overload
    def sendCustomRequest(
        self,
        request: QtNetwork.QNetworkRequest,
        verb: Union[QtCore.QByteArray, bytes],
        data: Optional[QtCore.QIODevice] = ...,
    ) -> QtNetwork.QNetworkReply: ...
    @overload
    def sendCustomRequest(
        self,
        request: QtNetwork.QNetworkRequest,
        verb: Union[QtCore.QByteArray, bytes],
        data: Union[QtCore.QByteArray, bytes],
    ) -> QtNetwork.QNetworkReply: ...
    @overload
    def sendCustomRequest(
        self,
        request: QtNetwork.QNetworkRequest,
        verb: Union[QtCore.QByteArray, bytes],
        multiPart: QtNetwork.QHttpMultiPart,
    ) -> QtNetwork.QNetworkReply: ...
    def setAutoDeleteReplies(self, autoDelete: bool) -> None: ...
    def setCache(self, cache: QtNetwork.QAbstractNetworkCache) -> None: ...
    def setCookieJar(self, cookieJar: QtNetwork.QNetworkCookieJar) -> None: ...
    def setProxy(
        self, proxy: Union[QtNetwork.QNetworkProxy, QtNetwork.QNetworkProxy.ProxyType]
    ) -> None: ...
    def setProxyFactory(self, factory: QtNetwork.QNetworkProxyFactory) -> None: ...
    def setRedirectPolicy(self, policy: QtNetwork.QNetworkRequest.RedirectPolicy) -> None: ...
    def setStrictTransportSecurityEnabled(self, enabled: bool) -> None: ...
    def setTransferTimeout(self, timeout: int = ...) -> None: ...
    def strictTransportSecurityHosts(self) -> List[QtNetwork.QHstsPolicy]: ...
    def supportedSchemes(self) -> List[str]: ...
    def supportedSchemesImplementation(self) -> List[str]: ...
    def transferTimeout(self) -> int: ...

class QNetworkAddressEntry(Shiboken.Object):
    class DnsEligibilityStatus(enum.Enum):

        DnsEligibilityUnknown: QNetworkAddressEntry.DnsEligibilityStatus = ...  # -0x1
        DnsIneligible: QNetworkAddressEntry.DnsEligibilityStatus = ...  # 0x0
        DnsEligible: QNetworkAddressEntry.DnsEligibilityStatus = ...  # 0x1
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QNetworkAddressEntry) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def broadcast(self) -> QtNetwork.QHostAddress: ...
    def clearAddressLifetime(self) -> None: ...
    def dnsEligibility(self) -> QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus: ...
    def ip(self) -> QtNetwork.QHostAddress: ...
    def isLifetimeKnown(self) -> bool: ...
    def isPermanent(self) -> bool: ...
    def isTemporary(self) -> bool: ...
    def netmask(self) -> QtNetwork.QHostAddress: ...
    def preferredLifetime(self) -> QtCore.QDeadlineTimer: ...
    def prefixLength(self) -> int: ...
    def setAddressLifetime(
        self,
        preferred: Union[
            QtCore.QDeadlineTimer, QtCore.QDeadlineTimer.ForeverConstant, QtCore.Qt.TimerType, int
        ],
        validity: Union[
            QtCore.QDeadlineTimer, QtCore.QDeadlineTimer.ForeverConstant, QtCore.Qt.TimerType, int
        ],
    ) -> None: ...
    def setBroadcast(
        self, newBroadcast: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def setDnsEligibility(
        self, status: QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus
    ) -> None: ...
    def setIp(
        self, newIp: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def setNetmask(
        self, newNetmask: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> None: ...
    def setPrefixLength(self, length: int) -> None: ...
    def swap(self, other: QtNetwork.QNetworkAddressEntry) -> None: ...
    def validityLifetime(self) -> QtCore.QDeadlineTimer: ...

class QNetworkCacheMetaData(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QNetworkCacheMetaData) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, arg__1: QtCore.QDataStream) -> QtCore.QDataStream: ...
    def __rshift__(self, arg__1: QtCore.QDataStream) -> QtCore.QDataStream: ...
    def attributes(self) -> Dict[QtNetwork.QNetworkRequest.Attribute, Any]: ...
    def expirationDate(self) -> QtCore.QDateTime: ...
    def isValid(self) -> bool: ...
    def lastModified(self) -> QtCore.QDateTime: ...
    def rawHeaders(self) -> List[Tuple[QtCore.QByteArray, QtCore.QByteArray]]: ...
    def saveToDisk(self) -> bool: ...
    def setAttributes(self, attributes: Dict[QtNetwork.QNetworkRequest.Attribute, Any]) -> None: ...
    def setExpirationDate(self, dateTime: QtCore.QDateTime) -> None: ...
    def setLastModified(self, dateTime: QtCore.QDateTime) -> None: ...
    def setRawHeaders(
        self, headers: Sequence[Tuple[QtCore.QByteArray, QtCore.QByteArray]]
    ) -> None: ...
    def setSaveToDisk(self, allow: bool) -> None: ...
    def setUrl(self, url: Union[QtCore.QUrl, str]) -> None: ...
    def swap(self, other: QtNetwork.QNetworkCacheMetaData) -> None: ...
    def url(self) -> QtCore.QUrl: ...

class QNetworkCookie(Shiboken.Object):
    class RawForm(enum.Enum):

        NameAndValueOnly: QNetworkCookie.RawForm = ...  # 0x0
        Full: QNetworkCookie.RawForm = ...  # 0x1
    class SameSite(enum.Enum):

        Default: QNetworkCookie.SameSite = ...  # 0x0
        None_: QNetworkCookie.SameSite = ...  # 0x1
        Lax: QNetworkCookie.SameSite = ...  # 0x2
        Strict: QNetworkCookie.SameSite = ...  # 0x3
    @overload
    def __init__(
        self,
        name: Union[QtCore.QByteArray, bytes] = ...,
        value: Union[QtCore.QByteArray, bytes] = ...,
    ) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QNetworkCookie) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def domain(self) -> str: ...
    def expirationDate(self) -> QtCore.QDateTime: ...
    def hasSameIdentifier(self, other: QtNetwork.QNetworkCookie) -> bool: ...
    def isHttpOnly(self) -> bool: ...
    def isSecure(self) -> bool: ...
    def isSessionCookie(self) -> bool: ...
    def name(self) -> QtCore.QByteArray: ...
    def normalize(self, url: Union[QtCore.QUrl, str]) -> None: ...
    @staticmethod
    def parseCookies(
        cookieString: Union[QtCore.QByteArray, bytes]
    ) -> List[QtNetwork.QNetworkCookie]: ...
    def path(self) -> str: ...
    def sameSitePolicy(self) -> QtNetwork.QNetworkCookie.SameSite: ...
    def setDomain(self, domain: str) -> None: ...
    def setExpirationDate(self, date: QtCore.QDateTime) -> None: ...
    def setHttpOnly(self, enable: bool) -> None: ...
    def setName(self, cookieName: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setPath(self, path: str) -> None: ...
    def setSameSitePolicy(self, sameSite: QtNetwork.QNetworkCookie.SameSite) -> None: ...
    def setSecure(self, enable: bool) -> None: ...
    def setValue(self, value: Union[QtCore.QByteArray, bytes]) -> None: ...
    def swap(self, other: QtNetwork.QNetworkCookie) -> None: ...
    def toRawForm(self, form: QtNetwork.QNetworkCookie.RawForm = ...) -> QtCore.QByteArray: ...
    def value(self) -> QtCore.QByteArray: ...

class QNetworkCookieJar(QtCore.QObject):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def allCookies(self) -> List[QtNetwork.QNetworkCookie]: ...
    def cookiesForUrl(self, url: Union[QtCore.QUrl, str]) -> List[QtNetwork.QNetworkCookie]: ...
    def deleteCookie(self, cookie: QtNetwork.QNetworkCookie) -> bool: ...
    def insertCookie(self, cookie: QtNetwork.QNetworkCookie) -> bool: ...
    def setAllCookies(self, cookieList: Sequence[QtNetwork.QNetworkCookie]) -> None: ...
    def setCookiesFromUrl(
        self, cookieList: Sequence[QtNetwork.QNetworkCookie], url: Union[QtCore.QUrl, str]
    ) -> bool: ...
    def updateCookie(self, cookie: QtNetwork.QNetworkCookie) -> bool: ...
    def validateCookie(
        self, cookie: QtNetwork.QNetworkCookie, url: Union[QtCore.QUrl, str]
    ) -> bool: ...

class QNetworkDatagram(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        data: Union[QtCore.QByteArray, bytes],
        destinationAddress: Union[
            QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress
        ] = ...,
        port: int = ...,
    ) -> None: ...
    @overload
    def __init__(self, other: Union[QtNetwork.QNetworkDatagram, QtCore.QByteArray]) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def clear(self) -> None: ...
    def data(self) -> QtCore.QByteArray: ...
    def destinationAddress(self) -> QtNetwork.QHostAddress: ...
    def destinationPort(self) -> int: ...
    def hopLimit(self) -> int: ...
    def interfaceIndex(self) -> int: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def makeReply(self, payload: Union[QtCore.QByteArray, bytes]) -> QtNetwork.QNetworkDatagram: ...
    def senderAddress(self) -> QtNetwork.QHostAddress: ...
    def senderPort(self) -> int: ...
    def setData(self, data: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setDestination(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int,
    ) -> None: ...
    def setHopLimit(self, count: int) -> None: ...
    def setInterfaceIndex(self, index: int) -> None: ...
    def setSender(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int = ...,
    ) -> None: ...
    def swap(self, other: Union[QtNetwork.QNetworkDatagram, QtCore.QByteArray]) -> None: ...

class QNetworkDiskCache(QtNetwork.QAbstractNetworkCache):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def cacheDirectory(self) -> str: ...
    def cacheSize(self) -> int: ...
    def clear(self) -> None: ...
    def data(self, url: Union[QtCore.QUrl, str]) -> QtCore.QIODevice: ...
    def expire(self) -> int: ...
    def fileMetaData(self, fileName: str) -> QtNetwork.QNetworkCacheMetaData: ...
    def insert(self, device: QtCore.QIODevice) -> None: ...
    def maximumCacheSize(self) -> int: ...
    def metaData(self, url: Union[QtCore.QUrl, str]) -> QtNetwork.QNetworkCacheMetaData: ...
    def prepare(self, metaData: QtNetwork.QNetworkCacheMetaData) -> QtCore.QIODevice: ...
    def remove(self, url: Union[QtCore.QUrl, str]) -> bool: ...
    def setCacheDirectory(self, cacheDir: str) -> None: ...
    def setMaximumCacheSize(self, size: int) -> None: ...
    def updateMetaData(self, metaData: QtNetwork.QNetworkCacheMetaData) -> None: ...

class QNetworkInformation(QtCore.QObject):
    class Feature(enum.Flag):

        Reachability: QNetworkInformation.Feature = ...  # 0x1
        CaptivePortal: QNetworkInformation.Feature = ...  # 0x2
        TransportMedium: QNetworkInformation.Feature = ...  # 0x4
        Metered: QNetworkInformation.Feature = ...  # 0x8
    class Reachability(enum.Enum):

        Unknown: QNetworkInformation.Reachability = ...  # 0x0
        Disconnected: QNetworkInformation.Reachability = ...  # 0x1
        Local: QNetworkInformation.Reachability = ...  # 0x2
        Site: QNetworkInformation.Reachability = ...  # 0x3
        Online: QNetworkInformation.Reachability = ...  # 0x4
    class TransportMedium(enum.Enum):

        Unknown: QNetworkInformation.TransportMedium = ...  # 0x0
        Ethernet: QNetworkInformation.TransportMedium = ...  # 0x1
        Cellular: QNetworkInformation.TransportMedium = ...  # 0x2
        WiFi: QNetworkInformation.TransportMedium = ...  # 0x3
        Bluetooth: QNetworkInformation.TransportMedium = ...  # 0x4
    @staticmethod
    def availableBackends() -> List[str]: ...
    def backendName(self) -> str: ...
    @staticmethod
    def instance() -> QtNetwork.QNetworkInformation: ...
    def isBehindCaptivePortal(self) -> bool: ...
    def isMetered(self) -> bool: ...
    @overload
    @staticmethod
    def load(backend: str) -> bool: ...
    @overload
    @staticmethod
    def load(features: QtNetwork.QNetworkInformation.Feature) -> bool: ...
    @staticmethod
    def loadBackendByFeatures(features: QtNetwork.QNetworkInformation.Feature) -> bool: ...
    @staticmethod
    def loadBackendByName(backend: str) -> bool: ...
    @staticmethod
    def loadDefaultBackend() -> bool: ...
    def reachability(self) -> QtNetwork.QNetworkInformation.Reachability: ...
    def supportedFeatures(self) -> QtNetwork.QNetworkInformation.Feature: ...
    def supports(self, features: QtNetwork.QNetworkInformation.Feature) -> bool: ...
    def transportMedium(self) -> QtNetwork.QNetworkInformation.TransportMedium: ...

class QNetworkInterface(Shiboken.Object):
    class InterfaceFlag(enum.Flag):

        IsUp: QNetworkInterface.InterfaceFlag = ...  # 0x1
        IsRunning: QNetworkInterface.InterfaceFlag = ...  # 0x2
        CanBroadcast: QNetworkInterface.InterfaceFlag = ...  # 0x4
        IsLoopBack: QNetworkInterface.InterfaceFlag = ...  # 0x8
        IsPointToPoint: QNetworkInterface.InterfaceFlag = ...  # 0x10
        CanMulticast: QNetworkInterface.InterfaceFlag = ...  # 0x20
    class InterfaceType(enum.Enum):

        Unknown: QNetworkInterface.InterfaceType = ...  # 0x0
        Loopback: QNetworkInterface.InterfaceType = ...  # 0x1
        Virtual: QNetworkInterface.InterfaceType = ...  # 0x2
        Ethernet: QNetworkInterface.InterfaceType = ...  # 0x3
        Slip: QNetworkInterface.InterfaceType = ...  # 0x4
        CanBus: QNetworkInterface.InterfaceType = ...  # 0x5
        Ppp: QNetworkInterface.InterfaceType = ...  # 0x6
        Fddi: QNetworkInterface.InterfaceType = ...  # 0x7
        Ieee80211: QNetworkInterface.InterfaceType = ...  # 0x8
        Wifi: QNetworkInterface.InterfaceType = ...  # 0x8
        Phonet: QNetworkInterface.InterfaceType = ...  # 0x9
        Ieee802154: QNetworkInterface.InterfaceType = ...  # 0xa
        SixLoWPAN: QNetworkInterface.InterfaceType = ...  # 0xb
        Ieee80216: QNetworkInterface.InterfaceType = ...  # 0xc
        Ieee1394: QNetworkInterface.InterfaceType = ...  # 0xd
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QNetworkInterface) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def addressEntries(self) -> List[QtNetwork.QNetworkAddressEntry]: ...
    @staticmethod
    def allAddresses() -> List[QtNetwork.QHostAddress]: ...
    @staticmethod
    def allInterfaces() -> List[QtNetwork.QNetworkInterface]: ...
    def flags(self) -> QtNetwork.QNetworkInterface.InterfaceFlag: ...
    def hardwareAddress(self) -> str: ...
    def humanReadableName(self) -> str: ...
    def index(self) -> int: ...
    @staticmethod
    def interfaceFromIndex(index: int) -> QtNetwork.QNetworkInterface: ...
    @staticmethod
    def interfaceFromName(name: str) -> QtNetwork.QNetworkInterface: ...
    @staticmethod
    def interfaceIndexFromName(name: str) -> int: ...
    @staticmethod
    def interfaceNameFromIndex(index: int) -> str: ...
    def isValid(self) -> bool: ...
    def maximumTransmissionUnit(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QtNetwork.QNetworkInterface) -> None: ...
    def type(self) -> QtNetwork.QNetworkInterface.InterfaceType: ...

class QNetworkProxy(Shiboken.Object):
    class Capability(enum.Flag):

        TunnelingCapability: QNetworkProxy.Capability = ...  # 0x1
        ListeningCapability: QNetworkProxy.Capability = ...  # 0x2
        UdpTunnelingCapability: QNetworkProxy.Capability = ...  # 0x4
        CachingCapability: QNetworkProxy.Capability = ...  # 0x8
        HostNameLookupCapability: QNetworkProxy.Capability = ...  # 0x10
        SctpTunnelingCapability: QNetworkProxy.Capability = ...  # 0x20
        SctpListeningCapability: QNetworkProxy.Capability = ...  # 0x40
    class ProxyType(enum.Enum):

        DefaultProxy: QNetworkProxy.ProxyType = ...  # 0x0
        Socks5Proxy: QNetworkProxy.ProxyType = ...  # 0x1
        NoProxy: QNetworkProxy.ProxyType = ...  # 0x2
        HttpProxy: QNetworkProxy.ProxyType = ...  # 0x3
        HttpCachingProxy: QNetworkProxy.ProxyType = ...  # 0x4
        FtpCachingProxy: QNetworkProxy.ProxyType = ...  # 0x5
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, other: Union[QtNetwork.QNetworkProxy, QtNetwork.QNetworkProxy.ProxyType]
    ) -> None: ...
    @overload
    def __init__(
        self,
        type: QtNetwork.QNetworkProxy.ProxyType,
        hostName: str = ...,
        port: int = ...,
        user: str = ...,
        password: str = ...,
    ) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def applicationProxy() -> QtNetwork.QNetworkProxy: ...
    def capabilities(self) -> QtNetwork.QNetworkProxy.Capability: ...
    def hasRawHeader(self, headerName: Union[QtCore.QByteArray, bytes]) -> bool: ...
    def header(self, header: QtNetwork.QNetworkRequest.KnownHeaders) -> Any: ...
    def hostName(self) -> str: ...
    def isCachingProxy(self) -> bool: ...
    def isTransparentProxy(self) -> bool: ...
    def password(self) -> str: ...
    def port(self) -> int: ...
    def rawHeader(self, headerName: Union[QtCore.QByteArray, bytes]) -> QtCore.QByteArray: ...
    def rawHeaderList(self) -> List[QtCore.QByteArray]: ...
    @staticmethod
    def setApplicationProxy(
        proxy: Union[QtNetwork.QNetworkProxy, QtNetwork.QNetworkProxy.ProxyType]
    ) -> None: ...
    def setCapabilities(self, capab: QtNetwork.QNetworkProxy.Capability) -> None: ...
    def setHeader(self, header: QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None: ...
    def setHostName(self, hostName: str) -> None: ...
    def setPassword(self, password: str) -> None: ...
    def setPort(self, port: int) -> None: ...
    def setRawHeader(
        self, headerName: Union[QtCore.QByteArray, bytes], value: Union[QtCore.QByteArray, bytes]
    ) -> None: ...
    def setType(self, type: QtNetwork.QNetworkProxy.ProxyType) -> None: ...
    def setUser(self, userName: str) -> None: ...
    def swap(
        self, other: Union[QtNetwork.QNetworkProxy, QtNetwork.QNetworkProxy.ProxyType]
    ) -> None: ...
    def type(self) -> QtNetwork.QNetworkProxy.ProxyType: ...
    def user(self) -> str: ...

class QNetworkProxyFactory(Shiboken.Object):
    def __init__(self) -> None: ...
    @staticmethod
    def proxyForQuery(
        query: Union[QtNetwork.QNetworkProxyQuery, QtCore.QUrl, int]
    ) -> List[QtNetwork.QNetworkProxy]: ...
    def queryProxy(
        self, query: Union[QtNetwork.QNetworkProxyQuery, QtCore.QUrl, int] = ...
    ) -> List[QtNetwork.QNetworkProxy]: ...
    @staticmethod
    def setApplicationProxyFactory(factory: QtNetwork.QNetworkProxyFactory) -> None: ...
    @staticmethod
    def setUseSystemConfiguration(enable: bool) -> None: ...
    @staticmethod
    def systemProxyForQuery(
        query: Union[QtNetwork.QNetworkProxyQuery, QtCore.QUrl, int] = ...
    ) -> List[QtNetwork.QNetworkProxy]: ...
    @staticmethod
    def usesSystemConfiguration() -> bool: ...

class QNetworkProxyQuery(Shiboken.Object):
    class QueryType(enum.Enum):

        TcpSocket: QNetworkProxyQuery.QueryType = ...  # 0x0
        UdpSocket: QNetworkProxyQuery.QueryType = ...  # 0x1
        SctpSocket: QNetworkProxyQuery.QueryType = ...  # 0x2
        TcpServer: QNetworkProxyQuery.QueryType = ...  # 0x64
        UrlRequest: QNetworkProxyQuery.QueryType = ...  # 0x65
        SctpServer: QNetworkProxyQuery.QueryType = ...  # 0x66
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        bindPort: int,
        protocolTag: str = ...,
        queryType: QtNetwork.QNetworkProxyQuery.QueryType = ...,
    ) -> None: ...
    @overload
    def __init__(
        self,
        hostname: str,
        port: int,
        protocolTag: str = ...,
        queryType: QtNetwork.QNetworkProxyQuery.QueryType = ...,
    ) -> None: ...
    @overload
    def __init__(self, other: Union[QtNetwork.QNetworkProxyQuery, QtCore.QUrl, int]) -> None: ...
    @overload
    def __init__(
        self,
        requestUrl: Union[QtCore.QUrl, str],
        queryType: QtNetwork.QNetworkProxyQuery.QueryType = ...,
    ) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def localPort(self) -> int: ...
    def peerHostName(self) -> str: ...
    def peerPort(self) -> int: ...
    def protocolTag(self) -> str: ...
    def queryType(self) -> QtNetwork.QNetworkProxyQuery.QueryType: ...
    def setLocalPort(self, port: int) -> None: ...
    def setPeerHostName(self, hostname: str) -> None: ...
    def setPeerPort(self, port: int) -> None: ...
    def setProtocolTag(self, protocolTag: str) -> None: ...
    def setQueryType(self, type: QtNetwork.QNetworkProxyQuery.QueryType) -> None: ...
    def setUrl(self, url: Union[QtCore.QUrl, str]) -> None: ...
    def swap(self, other: Union[QtNetwork.QNetworkProxyQuery, QtCore.QUrl, int]) -> None: ...
    def url(self) -> QtCore.QUrl: ...

class QNetworkReply(QtCore.QIODevice):
    downloadProgress = QtCore.Signal(int, int)
    encrypted = QtCore.Signal()
    errorOccurred = QtCore.Signal(NetworkError)
    finished = QtCore.Signal()
    metaDataChanged = QtCore.Signal()
    preSharedKeyAuthenticationRequired = QtCore.Signal(QSslPreSharedKeyAuthenticator)
    redirectAllowed = QtCore.Signal()
    redirected = QtCore.Signal(QtCore.QUrl)
    requestSent = QtCore.Signal()
    socketStartedConnecting = QtCore.Signal()
    sslErrors = QtCore.Signal(list[QSslError])
    uploadProgress = QtCore.Signal(int, int)

    class NetworkError(enum.Enum):

        NoError: QNetworkReply.NetworkError  # 0x0
        ConnectionRefusedError: QNetworkReply.NetworkError = ...  # 0x1
        RemoteHostClosedError: QNetworkReply.NetworkError = ...  # 0x2
        HostNotFoundError: QNetworkReply.NetworkError = ...  # 0x3
        TimeoutError: QNetworkReply.NetworkError = ...  # 0x4
        OperationCanceledError: QNetworkReply.NetworkError = ...  # 0x5
        SslHandshakeFailedError: QNetworkReply.NetworkError = ...  # 0x6
        TemporaryNetworkFailureError: QNetworkReply.NetworkError = ...  # 0x7
        NetworkSessionFailedError: QNetworkReply.NetworkError = ...  # 0x8
        BackgroundRequestNotAllowedError: QNetworkReply.NetworkError = ...  # 0x9
        TooManyRedirectsError: QNetworkReply.NetworkError = ...  # 0xa
        InsecureRedirectError: QNetworkReply.NetworkError = ...  # 0xb
        UnknownNetworkError: QNetworkReply.NetworkError = ...  # 0x63
        ProxyConnectionRefusedError: QNetworkReply.NetworkError = ...  # 0x65
        ProxyConnectionClosedError: QNetworkReply.NetworkError = ...  # 0x66
        ProxyNotFoundError: QNetworkReply.NetworkError = ...  # 0x67
        ProxyTimeoutError: QNetworkReply.NetworkError = ...  # 0x68
        ProxyAuthenticationRequiredError: QNetworkReply.NetworkError = ...  # 0x69
        UnknownProxyError: QNetworkReply.NetworkError = ...  # 0xc7
        ContentAccessDenied: QNetworkReply.NetworkError = ...  # 0xc9
        ContentOperationNotPermittedError: QNetworkReply.NetworkError = ...  # 0xca
        ContentNotFoundError: QNetworkReply.NetworkError = ...  # 0xcb
        AuthenticationRequiredError: QNetworkReply.NetworkError = ...  # 0xcc
        ContentReSendError: QNetworkReply.NetworkError = ...  # 0xcd
        ContentConflictError: QNetworkReply.NetworkError = ...  # 0xce
        ContentGoneError: QNetworkReply.NetworkError = ...  # 0xcf
        UnknownContentError: QNetworkReply.NetworkError = ...  # 0x12b
        ProtocolUnknownError: QNetworkReply.NetworkError = ...  # 0x12d
        ProtocolInvalidOperationError: QNetworkReply.NetworkError = ...  # 0x12e
        ProtocolFailure: QNetworkReply.NetworkError = ...  # 0x18f
        InternalServerError: QNetworkReply.NetworkError = ...  # 0x191
        OperationNotImplementedError: QNetworkReply.NetworkError = ...  # 0x192
        ServiceUnavailableError: QNetworkReply.NetworkError = ...  # 0x193
        UnknownServerError: QNetworkReply.NetworkError = ...  # 0x1f3
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def abort(self) -> None: ...
    def attribute(self, code: QtNetwork.QNetworkRequest.Attribute) -> Any: ...
    def close(self) -> None: ...
    def error(self) -> QtNetwork.QNetworkReply.NetworkError: ...
    def hasRawHeader(self, headerName: Union[QtCore.QByteArray, bytes]) -> bool: ...
    def header(self, header: QtNetwork.QNetworkRequest.KnownHeaders) -> Any: ...
    @overload
    def ignoreSslErrors(self) -> None: ...
    @overload
    def ignoreSslErrors(self, errors: Sequence[QtNetwork.QSslError]) -> None: ...
    def ignoreSslErrorsImplementation(self, arg__1: Sequence[QtNetwork.QSslError]) -> None: ...
    def isFinished(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def manager(self) -> QtNetwork.QNetworkAccessManager: ...
    def operation(self) -> QtNetwork.QNetworkAccessManager.Operation: ...
    def rawHeader(self, headerName: Union[QtCore.QByteArray, bytes]) -> QtCore.QByteArray: ...
    def rawHeaderList(self) -> List[QtCore.QByteArray]: ...
    def rawHeaderPairs(self) -> List[Tuple[QtCore.QByteArray, QtCore.QByteArray]]: ...
    def readBufferSize(self) -> int: ...
    def request(self) -> QtNetwork.QNetworkRequest: ...
    def setAttribute(self, code: QtNetwork.QNetworkRequest.Attribute, value: Any) -> None: ...
    def setError(
        self, errorCode: QtNetwork.QNetworkReply.NetworkError, errorString: str
    ) -> None: ...
    def setFinished(self, arg__1: bool) -> None: ...
    def setHeader(self, header: QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None: ...
    def setOperation(self, operation: QtNetwork.QNetworkAccessManager.Operation) -> None: ...
    def setRawHeader(
        self, headerName: Union[QtCore.QByteArray, bytes], value: Union[QtCore.QByteArray, bytes]
    ) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setRequest(self, request: QtNetwork.QNetworkRequest) -> None: ...
    def setSslConfiguration(self, configuration: QtNetwork.QSslConfiguration) -> None: ...
    def setSslConfigurationImplementation(self, arg__1: QtNetwork.QSslConfiguration) -> None: ...
    def setUrl(self, url: Union[QtCore.QUrl, str]) -> None: ...
    def sslConfiguration(self) -> QtNetwork.QSslConfiguration: ...
    def sslConfigurationImplementation(self, arg__1: QtNetwork.QSslConfiguration) -> None: ...
    def url(self) -> QtCore.QUrl: ...
    def writeData(self, data: bytes, len: int) -> int: ...

class QNetworkRequest(Shiboken.Object):
    class Attribute(enum.Enum):

        HttpStatusCodeAttribute: QNetworkRequest.Attribute = ...  # 0x0
        HttpReasonPhraseAttribute: QNetworkRequest.Attribute = ...  # 0x1
        RedirectionTargetAttribute: QNetworkRequest.Attribute = ...  # 0x2
        ConnectionEncryptedAttribute: QNetworkRequest.Attribute = ...  # 0x3
        CacheLoadControlAttribute: QNetworkRequest.Attribute = ...  # 0x4
        CacheSaveControlAttribute: QNetworkRequest.Attribute = ...  # 0x5
        SourceIsFromCacheAttribute: QNetworkRequest.Attribute = ...  # 0x6
        DoNotBufferUploadDataAttribute: QNetworkRequest.Attribute = ...  # 0x7
        HttpPipeliningAllowedAttribute: QNetworkRequest.Attribute = ...  # 0x8
        HttpPipeliningWasUsedAttribute: QNetworkRequest.Attribute = ...  # 0x9
        CustomVerbAttribute: QNetworkRequest.Attribute = ...  # 0xa
        CookieLoadControlAttribute: QNetworkRequest.Attribute = ...  # 0xb
        AuthenticationReuseAttribute: QNetworkRequest.Attribute = ...  # 0xc
        CookieSaveControlAttribute: QNetworkRequest.Attribute = ...  # 0xd
        MaximumDownloadBufferSizeAttribute: QNetworkRequest.Attribute = ...  # 0xe
        DownloadBufferAttribute: QNetworkRequest.Attribute = ...  # 0xf
        SynchronousRequestAttribute: QNetworkRequest.Attribute = ...  # 0x10
        BackgroundRequestAttribute: QNetworkRequest.Attribute = ...  # 0x11
        EmitAllUploadProgressSignalsAttribute: QNetworkRequest.Attribute = ...  # 0x12
        Http2AllowedAttribute: QNetworkRequest.Attribute = ...  # 0x13
        Http2WasUsedAttribute: QNetworkRequest.Attribute = ...  # 0x14
        OriginalContentLengthAttribute: QNetworkRequest.Attribute = ...  # 0x15
        RedirectPolicyAttribute: QNetworkRequest.Attribute = ...  # 0x16
        Http2DirectAttribute: QNetworkRequest.Attribute = ...  # 0x17
        ResourceTypeAttribute: QNetworkRequest.Attribute = ...  # 0x18
        AutoDeleteReplyOnFinishAttribute: QNetworkRequest.Attribute = ...  # 0x19
        ConnectionCacheExpiryTimeoutSecondsAttribute: QNetworkRequest.Attribute = ...  # 0x1a
        Http2CleartextAllowedAttribute: QNetworkRequest.Attribute = ...  # 0x1b
        User: QNetworkRequest.Attribute = ...  # 0x3e8
        UserMax: QNetworkRequest.Attribute = ...  # 0x7fff
    class CacheLoadControl(enum.Enum):

        AlwaysNetwork: QNetworkRequest.CacheLoadControl = ...  # 0x0
        PreferNetwork: QNetworkRequest.CacheLoadControl = ...  # 0x1
        PreferCache: QNetworkRequest.CacheLoadControl = ...  # 0x2
        AlwaysCache: QNetworkRequest.CacheLoadControl = ...  # 0x3
    class KnownHeaders(enum.Enum):

        ContentTypeHeader: QNetworkRequest.KnownHeaders = ...  # 0x0
        ContentLengthHeader: QNetworkRequest.KnownHeaders = ...  # 0x1
        LocationHeader: QNetworkRequest.KnownHeaders = ...  # 0x2
        LastModifiedHeader: QNetworkRequest.KnownHeaders = ...  # 0x3
        CookieHeader: QNetworkRequest.KnownHeaders = ...  # 0x4
        SetCookieHeader: QNetworkRequest.KnownHeaders = ...  # 0x5
        ContentDispositionHeader: QNetworkRequest.KnownHeaders = ...  # 0x6
        UserAgentHeader: QNetworkRequest.KnownHeaders = ...  # 0x7
        ServerHeader: QNetworkRequest.KnownHeaders = ...  # 0x8
        IfModifiedSinceHeader: QNetworkRequest.KnownHeaders = ...  # 0x9
        ETagHeader: QNetworkRequest.KnownHeaders = ...  # 0xa
        IfMatchHeader: QNetworkRequest.KnownHeaders = ...  # 0xb
        IfNoneMatchHeader: QNetworkRequest.KnownHeaders = ...  # 0xc
    class LoadControl(enum.Enum):

        Automatic: QNetworkRequest.LoadControl = ...  # 0x0
        Manual: QNetworkRequest.LoadControl = ...  # 0x1
    class Priority(enum.Enum):

        HighPriority: QNetworkRequest.Priority = ...  # 0x1
        NormalPriority: QNetworkRequest.Priority = ...  # 0x3
        LowPriority: QNetworkRequest.Priority = ...  # 0x5
    class RedirectPolicy(enum.Enum):

        ManualRedirectPolicy: QNetworkRequest.RedirectPolicy = ...  # 0x0
        NoLessSafeRedirectPolicy: QNetworkRequest.RedirectPolicy = ...  # 0x1
        SameOriginRedirectPolicy: QNetworkRequest.RedirectPolicy = ...  # 0x2
        UserVerifiedRedirectPolicy: QNetworkRequest.RedirectPolicy = ...  # 0x3
    class TransferTimeoutConstant(enum.Enum):

        DefaultTransferTimeoutConstant: QNetworkRequest.TransferTimeoutConstant = ...  # 0x7530
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QNetworkRequest) -> None: ...
    @overload
    def __init__(self, url: Union[QtCore.QUrl, str]) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def attribute(
        self, code: QtNetwork.QNetworkRequest.Attribute, defaultValue: Any = ...
    ) -> Any: ...
    def decompressedSafetyCheckThreshold(self) -> int: ...
    def hasRawHeader(self, headerName: Union[QtCore.QByteArray, bytes]) -> bool: ...
    def header(self, header: QtNetwork.QNetworkRequest.KnownHeaders) -> Any: ...
    def http2Configuration(self) -> QtNetwork.QHttp2Configuration: ...
    def maximumRedirectsAllowed(self) -> int: ...
    def originatingObject(self) -> QtCore.QObject: ...
    def peerVerifyName(self) -> str: ...
    def priority(self) -> QtNetwork.QNetworkRequest.Priority: ...
    def rawHeader(self, headerName: Union[QtCore.QByteArray, bytes]) -> QtCore.QByteArray: ...
    def rawHeaderList(self) -> List[QtCore.QByteArray]: ...
    def setAttribute(self, code: QtNetwork.QNetworkRequest.Attribute, value: Any) -> None: ...
    def setDecompressedSafetyCheckThreshold(self, threshold: int) -> None: ...
    def setHeader(self, header: QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None: ...
    def setHttp2Configuration(self, configuration: QtNetwork.QHttp2Configuration) -> None: ...
    def setMaximumRedirectsAllowed(self, maximumRedirectsAllowed: int) -> None: ...
    def setOriginatingObject(self, object: QtCore.QObject) -> None: ...
    def setPeerVerifyName(self, peerName: str) -> None: ...
    def setPriority(self, priority: QtNetwork.QNetworkRequest.Priority) -> None: ...
    def setRawHeader(
        self, headerName: Union[QtCore.QByteArray, bytes], value: Union[QtCore.QByteArray, bytes]
    ) -> None: ...
    def setSslConfiguration(self, configuration: QtNetwork.QSslConfiguration) -> None: ...
    def setTransferTimeout(self, timeout: int = ...) -> None: ...
    def setUrl(self, url: Union[QtCore.QUrl, str]) -> None: ...
    def sslConfiguration(self) -> QtNetwork.QSslConfiguration: ...
    def swap(self, other: QtNetwork.QNetworkRequest) -> None: ...
    def transferTimeout(self) -> int: ...
    def url(self) -> QtCore.QUrl: ...

class QOcspCertificateStatus(enum.Enum):

    Good: QOcspCertificateStatus = ...  # 0x0
    Revoked: QOcspCertificateStatus = ...  # 0x1
    Unknown: QOcspCertificateStatus = ...  # 0x2

class QOcspResponse(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QOcspResponse) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def certificateStatus(self) -> QtNetwork.QOcspCertificateStatus: ...
    def revocationReason(self) -> QtNetwork.QOcspRevocationReason: ...
    def subject(self) -> QtNetwork.QSslCertificate: ...
    def swap(self, other: QtNetwork.QOcspResponse) -> None: ...

class QOcspRevocationReason(enum.Enum):

    None_: QOcspRevocationReason = ...  # -0x1
    Unspecified: QOcspRevocationReason = ...  # 0x0
    KeyCompromise: QOcspRevocationReason = ...  # 0x1
    CACompromise: QOcspRevocationReason = ...  # 0x2
    AffiliationChanged: QOcspRevocationReason = ...  # 0x3
    Superseded: QOcspRevocationReason = ...  # 0x4
    CessationOfOperation: QOcspRevocationReason = ...  # 0x5
    CertificateHold: QOcspRevocationReason = ...  # 0x6
    RemoveFromCRL: QOcspRevocationReason = ...  # 0x7

class QPasswordDigestor(Shiboken.Object):
    @staticmethod
    def deriveKeyPbkdf1(
        algorithm: QtCore.QCryptographicHash.Algorithm,
        password: Union[QtCore.QByteArray, bytes],
        salt: Union[QtCore.QByteArray, bytes],
        iterations: int,
        dkLen: int,
    ) -> QtCore.QByteArray: ...
    @staticmethod
    def deriveKeyPbkdf2(
        algorithm: QtCore.QCryptographicHash.Algorithm,
        password: Union[QtCore.QByteArray, bytes],
        salt: Union[QtCore.QByteArray, bytes],
        iterations: int,
        dkLen: int,
    ) -> QtCore.QByteArray: ...

class QSsl(Shiboken.Object):
    class AlertLevel(enum.Enum):

        Warning: QSsl.AlertLevel = ...  # 0x0
        Fatal: QSsl.AlertLevel = ...  # 0x1
        Unknown: QSsl.AlertLevel = ...  # 0x2
    class AlertType(enum.Enum):

        CloseNotify: QSsl.AlertType = ...  # 0x0
        UnexpectedMessage: QSsl.AlertType = ...  # 0xa
        BadRecordMac: QSsl.AlertType = ...  # 0x14
        RecordOverflow: QSsl.AlertType = ...  # 0x16
        DecompressionFailure: QSsl.AlertType = ...  # 0x1e
        HandshakeFailure: QSsl.AlertType = ...  # 0x28
        NoCertificate: QSsl.AlertType = ...  # 0x29
        BadCertificate: QSsl.AlertType = ...  # 0x2a
        UnsupportedCertificate: QSsl.AlertType = ...  # 0x2b
        CertificateRevoked: QSsl.AlertType = ...  # 0x2c
        CertificateExpired: QSsl.AlertType = ...  # 0x2d
        CertificateUnknown: QSsl.AlertType = ...  # 0x2e
        IllegalParameter: QSsl.AlertType = ...  # 0x2f
        UnknownCa: QSsl.AlertType = ...  # 0x30
        AccessDenied: QSsl.AlertType = ...  # 0x31
        DecodeError: QSsl.AlertType = ...  # 0x32
        DecryptError: QSsl.AlertType = ...  # 0x33
        ExportRestriction: QSsl.AlertType = ...  # 0x3c
        ProtocolVersion: QSsl.AlertType = ...  # 0x46
        InsufficientSecurity: QSsl.AlertType = ...  # 0x47
        InternalError: QSsl.AlertType = ...  # 0x50
        InappropriateFallback: QSsl.AlertType = ...  # 0x56
        UserCancelled: QSsl.AlertType = ...  # 0x5a
        NoRenegotiation: QSsl.AlertType = ...  # 0x64
        MissingExtension: QSsl.AlertType = ...  # 0x6d
        UnsupportedExtension: QSsl.AlertType = ...  # 0x6e
        CertificateUnobtainable: QSsl.AlertType = ...  # 0x6f
        UnrecognizedName: QSsl.AlertType = ...  # 0x70
        BadCertificateStatusResponse: QSsl.AlertType = ...  # 0x71
        BadCertificateHashValue: QSsl.AlertType = ...  # 0x72
        UnknownPskIdentity: QSsl.AlertType = ...  # 0x73
        CertificateRequired: QSsl.AlertType = ...  # 0x74
        NoApplicationProtocol: QSsl.AlertType = ...  # 0x78
        UnknownAlertMessage: QSsl.AlertType = ...  # 0xff
    class AlternativeNameEntryType(enum.Enum):

        EmailEntry: QSsl.AlternativeNameEntryType = ...  # 0x0
        DnsEntry: QSsl.AlternativeNameEntryType = ...  # 0x1
        IpAddressEntry: QSsl.AlternativeNameEntryType = ...  # 0x2
    class EncodingFormat(enum.Enum):

        Pem: QSsl.EncodingFormat = ...  # 0x0
        Der: QSsl.EncodingFormat = ...  # 0x1
    class ImplementedClass(enum.Enum):

        Key: QSsl.ImplementedClass = ...  # 0x0
        Certificate: QSsl.ImplementedClass = ...  # 0x1
        Socket: QSsl.ImplementedClass = ...  # 0x2
        DiffieHellman: QSsl.ImplementedClass = ...  # 0x3
        EllipticCurve: QSsl.ImplementedClass = ...  # 0x4
        Dtls: QSsl.ImplementedClass = ...  # 0x5
        DtlsCookie: QSsl.ImplementedClass = ...  # 0x6
    class KeyAlgorithm(enum.Enum):

        Opaque: QSsl.KeyAlgorithm = ...  # 0x0
        Rsa: QSsl.KeyAlgorithm = ...  # 0x1
        Dsa: QSsl.KeyAlgorithm = ...  # 0x2
        Ec: QSsl.KeyAlgorithm = ...  # 0x3
        Dh: QSsl.KeyAlgorithm = ...  # 0x4
    class KeyType(enum.Enum):

        PrivateKey: QSsl.KeyType = ...  # 0x0
        PublicKey: QSsl.KeyType = ...  # 0x1
    class SslOption(enum.Flag):

        SslOptionDisableEmptyFragments: QSsl.SslOption = ...  # 0x1
        SslOptionDisableSessionTickets: QSsl.SslOption = ...  # 0x2
        SslOptionDisableCompression: QSsl.SslOption = ...  # 0x4
        SslOptionDisableServerNameIndication: QSsl.SslOption = ...  # 0x8
        SslOptionDisableLegacyRenegotiation: QSsl.SslOption = ...  # 0x10
        SslOptionDisableSessionSharing: QSsl.SslOption = ...  # 0x20
        SslOptionDisableSessionPersistence: QSsl.SslOption = ...  # 0x40
        SslOptionDisableServerCipherPreference: QSsl.SslOption = ...  # 0x80
    class SslProtocol(enum.Enum):

        UnknownProtocol: QSsl.SslProtocol = ...  # -0x1
        TlsV1_0: QSsl.SslProtocol = ...  # 0x0
        TlsV1_1: QSsl.SslProtocol = ...  # 0x1
        TlsV1_2: QSsl.SslProtocol = ...  # 0x2
        AnyProtocol: QSsl.SslProtocol = ...  # 0x3
        SecureProtocols: QSsl.SslProtocol = ...  # 0x4
        TlsV1_0OrLater: QSsl.SslProtocol = ...  # 0x5
        TlsV1_1OrLater: QSsl.SslProtocol = ...  # 0x6
        TlsV1_2OrLater: QSsl.SslProtocol = ...  # 0x7
        DtlsV1_0: QSsl.SslProtocol = ...  # 0x8
        DtlsV1_0OrLater: QSsl.SslProtocol = ...  # 0x9
        DtlsV1_2: QSsl.SslProtocol = ...  # 0xa
        DtlsV1_2OrLater: QSsl.SslProtocol = ...  # 0xb
        TlsV1_3: QSsl.SslProtocol = ...  # 0xc
        TlsV1_3OrLater: QSsl.SslProtocol = ...  # 0xd
    class SupportedFeature(enum.Enum):

        CertificateVerification: QSsl.SupportedFeature = ...  # 0x0
        ClientSideAlpn: QSsl.SupportedFeature = ...  # 0x1
        ServerSideAlpn: QSsl.SupportedFeature = ...  # 0x2
        Ocsp: QSsl.SupportedFeature = ...  # 0x3
        Psk: QSsl.SupportedFeature = ...  # 0x4
        SessionTicket: QSsl.SupportedFeature = ...  # 0x5
        Alerts: QSsl.SupportedFeature = ...  # 0x6

class QSslCertificate(Shiboken.Object):
    class PatternSyntax(enum.Enum):

        RegularExpression: QSslCertificate.PatternSyntax = ...  # 0x0
        Wildcard: QSslCertificate.PatternSyntax = ...  # 0x1
        FixedString: QSslCertificate.PatternSyntax = ...  # 0x2
    class SubjectInfo(enum.Enum):

        Organization: QSslCertificate.SubjectInfo = ...  # 0x0
        CommonName: QSslCertificate.SubjectInfo = ...  # 0x1
        LocalityName: QSslCertificate.SubjectInfo = ...  # 0x2
        OrganizationalUnitName: QSslCertificate.SubjectInfo = ...  # 0x3
        CountryName: QSslCertificate.SubjectInfo = ...  # 0x4
        StateOrProvinceName: QSslCertificate.SubjectInfo = ...  # 0x5
        DistinguishedNameQualifier: QSslCertificate.SubjectInfo = ...  # 0x6
        SerialNumber: QSslCertificate.SubjectInfo = ...  # 0x7
        EmailAddress: QSslCertificate.SubjectInfo = ...  # 0x8
    @overload
    def __init__(
        self,
        data: Union[QtCore.QByteArray, bytes] = ...,
        format: QtNetwork.QSsl.EncodingFormat = ...,
    ) -> None: ...
    @overload
    def __init__(
        self, device: QtCore.QIODevice, format: QtNetwork.QSsl.EncodingFormat = ...
    ) -> None: ...
    @overload
    def __init__(self, other: Union[QtNetwork.QSslCertificate, QtCore.QIODevice]) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def clear(self) -> None: ...
    def digest(self, algorithm: QtCore.QCryptographicHash.Algorithm = ...) -> QtCore.QByteArray: ...
    def effectiveDate(self) -> QtCore.QDateTime: ...
    def expiryDate(self) -> QtCore.QDateTime: ...
    def extensions(self) -> List[QtNetwork.QSslCertificateExtension]: ...
    @staticmethod
    def fromData(
        data: Union[QtCore.QByteArray, bytes], format: QtNetwork.QSsl.EncodingFormat = ...
    ) -> List[QtNetwork.QSslCertificate]: ...
    @staticmethod
    def fromDevice(
        device: QtCore.QIODevice, format: QtNetwork.QSsl.EncodingFormat = ...
    ) -> List[QtNetwork.QSslCertificate]: ...
    @staticmethod
    def fromPath(
        path: str,
        format: QtNetwork.QSsl.EncodingFormat = ...,
        syntax: QtNetwork.QSslCertificate.PatternSyntax = ...,
    ) -> List[QtNetwork.QSslCertificate]: ...
    def handle(self) -> int: ...
    @staticmethod
    def importPkcs12(
        device: QtCore.QIODevice,
        key: Union[QtNetwork.QSslKey, int],
        cert: Union[QtNetwork.QSslCertificate, QtCore.QIODevice],
        caCertificates: Optional[Sequence[QtNetwork.QSslCertificate]] = ...,
        passPhrase: Union[QtCore.QByteArray, bytes] = ...,
    ) -> bool: ...
    def isBlacklisted(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSelfSigned(self) -> bool: ...
    def issuerDisplayName(self) -> str: ...
    @overload
    def issuerInfo(self, attribute: Union[QtCore.QByteArray, bytes]) -> List[str]: ...
    @overload
    def issuerInfo(self, info: QtNetwork.QSslCertificate.SubjectInfo) -> List[str]: ...
    def issuerInfoAttributes(self) -> List[QtCore.QByteArray]: ...
    def publicKey(self) -> QtNetwork.QSslKey: ...
    def serialNumber(self) -> QtCore.QByteArray: ...
    def subjectAlternativeNames(
        self,
    ) -> OrderedDict[QtNetwork.QSsl.AlternativeNameEntryType, List[str]]: ...
    def subjectDisplayName(self) -> str: ...
    @overload
    def subjectInfo(self, attribute: Union[QtCore.QByteArray, bytes]) -> List[str]: ...
    @overload
    def subjectInfo(self, info: QtNetwork.QSslCertificate.SubjectInfo) -> List[str]: ...
    def subjectInfoAttributes(self) -> List[QtCore.QByteArray]: ...
    def swap(self, other: Union[QtNetwork.QSslCertificate, QtCore.QIODevice]) -> None: ...
    def toDer(self) -> QtCore.QByteArray: ...
    def toPem(self) -> QtCore.QByteArray: ...
    def toText(self) -> str: ...
    @staticmethod
    def verify(
        certificateChain: Sequence[QtNetwork.QSslCertificate], hostName: str = ...
    ) -> List[QtNetwork.QSslError]: ...
    def version(self) -> QtCore.QByteArray: ...

class QSslCertificateExtension(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QSslCertificateExtension) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def isCritical(self) -> bool: ...
    def isSupported(self) -> bool: ...
    def name(self) -> str: ...
    def oid(self) -> str: ...
    def swap(self, other: QtNetwork.QSslCertificateExtension) -> None: ...
    def value(self) -> Any: ...

class QSslCipher(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, protocol: QtNetwork.QSsl.SslProtocol) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QSslCipher) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def authenticationMethod(self) -> str: ...
    def encryptionMethod(self) -> str: ...
    def isNull(self) -> bool: ...
    def keyExchangeMethod(self) -> str: ...
    def name(self) -> str: ...
    def protocol(self) -> QtNetwork.QSsl.SslProtocol: ...
    def protocolString(self) -> str: ...
    def supportedBits(self) -> int: ...
    def swap(self, other: QtNetwork.QSslCipher) -> None: ...
    def usedBits(self) -> int: ...

class QSslConfiguration(Shiboken.Object):
    class NextProtocolNegotiationStatus(enum.Enum):

        NextProtocolNegotiationNone: QSslConfiguration.NextProtocolNegotiationStatus = ...  # 0x0
        NextProtocolNegotiationNegotiated: QSslConfiguration.NextProtocolNegotiationStatus = (
            ...
        )  # 0x1
        NextProtocolNegotiationUnsupported: QSslConfiguration.NextProtocolNegotiationStatus = (
            ...
        )  # 0x2
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QSslConfiguration) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def addCaCertificate(
        self, certificate: Union[QtNetwork.QSslCertificate, QtCore.QIODevice]
    ) -> None: ...
    @overload
    def addCaCertificates(self, certificates: Sequence[QtNetwork.QSslCertificate]) -> None: ...
    @overload
    def addCaCertificates(
        self,
        path: str,
        format: QtNetwork.QSsl.EncodingFormat = ...,
        syntax: QtNetwork.QSslCertificate.PatternSyntax = ...,
    ) -> bool: ...
    def allowedNextProtocols(self) -> List[QtCore.QByteArray]: ...
    def backendConfiguration(self) -> Dict[QtCore.QByteArray, Any]: ...
    def caCertificates(self) -> List[QtNetwork.QSslCertificate]: ...
    def ciphers(self) -> List[QtNetwork.QSslCipher]: ...
    @staticmethod
    def defaultConfiguration() -> QtNetwork.QSslConfiguration: ...
    @staticmethod
    def defaultDtlsConfiguration() -> QtNetwork.QSslConfiguration: ...
    def diffieHellmanParameters(self) -> QtNetwork.QSslDiffieHellmanParameters: ...
    def dtlsCookieVerificationEnabled(self) -> bool: ...
    def ellipticCurves(self) -> List[QtNetwork.QSslEllipticCurve]: ...
    def ephemeralServerKey(self) -> QtNetwork.QSslKey: ...
    def handshakeMustInterruptOnError(self) -> bool: ...
    def isNull(self) -> bool: ...
    def localCertificate(self) -> QtNetwork.QSslCertificate: ...
    def localCertificateChain(self) -> List[QtNetwork.QSslCertificate]: ...
    def missingCertificateIsFatal(self) -> bool: ...
    def nextNegotiatedProtocol(self) -> QtCore.QByteArray: ...
    def nextProtocolNegotiationStatus(
        self,
    ) -> QtNetwork.QSslConfiguration.NextProtocolNegotiationStatus: ...
    def ocspStaplingEnabled(self) -> bool: ...
    def peerCertificate(self) -> QtNetwork.QSslCertificate: ...
    def peerCertificateChain(self) -> List[QtNetwork.QSslCertificate]: ...
    def peerVerifyDepth(self) -> int: ...
    def peerVerifyMode(self) -> QtNetwork.QSslSocket.PeerVerifyMode: ...
    def preSharedKeyIdentityHint(self) -> QtCore.QByteArray: ...
    def privateKey(self) -> QtNetwork.QSslKey: ...
    def protocol(self) -> QtNetwork.QSsl.SslProtocol: ...
    def sessionCipher(self) -> QtNetwork.QSslCipher: ...
    def sessionProtocol(self) -> QtNetwork.QSsl.SslProtocol: ...
    def sessionTicket(self) -> QtCore.QByteArray: ...
    def sessionTicketLifeTimeHint(self) -> int: ...
    def setAllowedNextProtocols(self, protocols: Sequence[QtCore.QByteArray]) -> None: ...
    def setBackendConfiguration(
        self, backendConfiguration: Dict[QtCore.QByteArray, Any] = ...
    ) -> None: ...
    def setBackendConfigurationOption(
        self, name: Union[QtCore.QByteArray, bytes], value: Any
    ) -> None: ...
    def setCaCertificates(self, certificates: Sequence[QtNetwork.QSslCertificate]) -> None: ...
    @overload
    def setCiphers(self, ciphers: Sequence[QtNetwork.QSslCipher]) -> None: ...
    @overload
    def setCiphers(self, ciphers: str) -> None: ...
    @staticmethod
    def setDefaultConfiguration(configuration: QtNetwork.QSslConfiguration) -> None: ...
    @staticmethod
    def setDefaultDtlsConfiguration(configuration: QtNetwork.QSslConfiguration) -> None: ...
    def setDiffieHellmanParameters(
        self, dhparams: QtNetwork.QSslDiffieHellmanParameters
    ) -> None: ...
    def setDtlsCookieVerificationEnabled(self, enable: bool) -> None: ...
    def setEllipticCurves(self, curves: Sequence[QtNetwork.QSslEllipticCurve]) -> None: ...
    def setHandshakeMustInterruptOnError(self, interrupt: bool) -> None: ...
    def setLocalCertificate(
        self, certificate: Union[QtNetwork.QSslCertificate, QtCore.QIODevice]
    ) -> None: ...
    def setLocalCertificateChain(self, localChain: Sequence[QtNetwork.QSslCertificate]) -> None: ...
    def setMissingCertificateIsFatal(self, cannotRecover: bool) -> None: ...
    def setOcspStaplingEnabled(self, enable: bool) -> None: ...
    def setPeerVerifyDepth(self, depth: int) -> None: ...
    def setPeerVerifyMode(self, mode: QtNetwork.QSslSocket.PeerVerifyMode) -> None: ...
    def setPreSharedKeyIdentityHint(self, hint: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setPrivateKey(self, key: Union[QtNetwork.QSslKey, int]) -> None: ...
    def setProtocol(self, protocol: QtNetwork.QSsl.SslProtocol) -> None: ...
    def setSessionTicket(self, sessionTicket: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setSslOption(self, option: QtNetwork.QSsl.SslOption, on: bool) -> None: ...
    @staticmethod
    def supportedCiphers() -> List[QtNetwork.QSslCipher]: ...
    @staticmethod
    def supportedEllipticCurves() -> List[QtNetwork.QSslEllipticCurve]: ...
    def swap(self, other: QtNetwork.QSslConfiguration) -> None: ...
    @staticmethod
    def systemCaCertificates() -> List[QtNetwork.QSslCertificate]: ...
    def testSslOption(self, option: QtNetwork.QSsl.SslOption) -> bool: ...

class QSslDiffieHellmanParameters(Shiboken.Object):
    class Error(enum.Enum):

        NoError: QSslDiffieHellmanParameters.Error = ...  # 0x0
        InvalidInputDataError: QSslDiffieHellmanParameters.Error = ...  # 0x1
        UnsafeParametersError: QSslDiffieHellmanParameters.Error = ...  # 0x2
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QSslDiffieHellmanParameters) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def defaultParameters() -> QtNetwork.QSslDiffieHellmanParameters: ...
    def error(self) -> QtNetwork.QSslDiffieHellmanParameters.Error: ...
    def errorString(self) -> str: ...
    @overload
    @staticmethod
    def fromEncoded(
        device: QtCore.QIODevice, format: QtNetwork.QSsl.EncodingFormat = ...
    ) -> QtNetwork.QSslDiffieHellmanParameters: ...
    @overload
    @staticmethod
    def fromEncoded(
        encoded: Union[QtCore.QByteArray, bytes], format: QtNetwork.QSsl.EncodingFormat = ...
    ) -> QtNetwork.QSslDiffieHellmanParameters: ...
    def isEmpty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QtNetwork.QSslDiffieHellmanParameters) -> None: ...

class QSslEllipticCurve(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QSslEllipticCurve: QtNetwork.QSslEllipticCurve) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def fromLongName(name: str) -> QtNetwork.QSslEllipticCurve: ...
    @staticmethod
    def fromShortName(name: str) -> QtNetwork.QSslEllipticCurve: ...
    def isTlsNamedCurve(self) -> bool: ...
    def isValid(self) -> bool: ...
    def longName(self) -> str: ...
    def shortName(self) -> str: ...

class QSslError(Shiboken.Object):
    class SslError(enum.Enum):

        UnspecifiedError: QSslError.SslError = ...  # -0x1
        NoError: QSslError.SslError = ...  # 0x0
        UnableToGetIssuerCertificate: QSslError.SslError = ...  # 0x1
        UnableToDecryptCertificateSignature: QSslError.SslError = ...  # 0x2
        UnableToDecodeIssuerPublicKey: QSslError.SslError = ...  # 0x3
        CertificateSignatureFailed: QSslError.SslError = ...  # 0x4
        CertificateNotYetValid: QSslError.SslError = ...  # 0x5
        CertificateExpired: QSslError.SslError = ...  # 0x6
        InvalidNotBeforeField: QSslError.SslError = ...  # 0x7
        InvalidNotAfterField: QSslError.SslError = ...  # 0x8
        SelfSignedCertificate: QSslError.SslError = ...  # 0x9
        SelfSignedCertificateInChain: QSslError.SslError = ...  # 0xa
        UnableToGetLocalIssuerCertificate: QSslError.SslError = ...  # 0xb
        UnableToVerifyFirstCertificate: QSslError.SslError = ...  # 0xc
        CertificateRevoked: QSslError.SslError = ...  # 0xd
        InvalidCaCertificate: QSslError.SslError = ...  # 0xe
        PathLengthExceeded: QSslError.SslError = ...  # 0xf
        InvalidPurpose: QSslError.SslError = ...  # 0x10
        CertificateUntrusted: QSslError.SslError = ...  # 0x11
        CertificateRejected: QSslError.SslError = ...  # 0x12
        SubjectIssuerMismatch: QSslError.SslError = ...  # 0x13
        AuthorityIssuerSerialNumberMismatch: QSslError.SslError = ...  # 0x14
        NoPeerCertificate: QSslError.SslError = ...  # 0x15
        HostNameMismatch: QSslError.SslError = ...  # 0x16
        NoSslSupport: QSslError.SslError = ...  # 0x17
        CertificateBlacklisted: QSslError.SslError = ...  # 0x18
        CertificateStatusUnknown: QSslError.SslError = ...  # 0x19
        OcspNoResponseFound: QSslError.SslError = ...  # 0x1a
        OcspMalformedRequest: QSslError.SslError = ...  # 0x1b
        OcspMalformedResponse: QSslError.SslError = ...  # 0x1c
        OcspInternalError: QSslError.SslError = ...  # 0x1d
        OcspTryLater: QSslError.SslError = ...  # 0x1e
        OcspSigRequred: QSslError.SslError = ...  # 0x1f
        OcspUnauthorized: QSslError.SslError = ...  # 0x20
        OcspResponseCannotBeTrusted: QSslError.SslError = ...  # 0x21
        OcspResponseCertIdUnknown: QSslError.SslError = ...  # 0x22
        OcspResponseExpired: QSslError.SslError = ...  # 0x23
        OcspStatusUnknown: QSslError.SslError = ...  # 0x24
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, error: QtNetwork.QSslError.SslError) -> None: ...
    @overload
    def __init__(
        self,
        error: QtNetwork.QSslError.SslError,
        certificate: Union[QtNetwork.QSslCertificate, QtCore.QIODevice],
    ) -> None: ...
    @overload
    def __init__(self, other: QtNetwork.QSslError) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def certificate(self) -> QtNetwork.QSslCertificate: ...
    def error(self) -> QtNetwork.QSslError.SslError: ...
    def errorString(self) -> str: ...
    def swap(self, other: QtNetwork.QSslError) -> None: ...

class QSslKey(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        device: QtCore.QIODevice,
        algorithm: QtNetwork.QSsl.KeyAlgorithm,
        format: QtNetwork.QSsl.EncodingFormat = ...,
        type: QtNetwork.QSsl.KeyType = ...,
        passPhrase: Union[QtCore.QByteArray, bytes] = ...,
    ) -> None: ...
    @overload
    def __init__(
        self,
        encoded: Union[QtCore.QByteArray, bytes],
        algorithm: QtNetwork.QSsl.KeyAlgorithm,
        format: QtNetwork.QSsl.EncodingFormat = ...,
        type: QtNetwork.QSsl.KeyType = ...,
        passPhrase: Union[QtCore.QByteArray, bytes] = ...,
    ) -> None: ...
    @overload
    def __init__(self, handle: int, type: QtNetwork.QSsl.KeyType = ...) -> None: ...
    @overload
    def __init__(self, other: Union[QtNetwork.QSslKey, int]) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def algorithm(self) -> QtNetwork.QSsl.KeyAlgorithm: ...
    def clear(self) -> None: ...
    def handle(self) -> int: ...
    def isNull(self) -> bool: ...
    def length(self) -> int: ...
    def swap(self, other: Union[QtNetwork.QSslKey, int]) -> None: ...
    def toDer(self, passPhrase: Union[QtCore.QByteArray, bytes] = ...) -> QtCore.QByteArray: ...
    def toPem(self, passPhrase: Union[QtCore.QByteArray, bytes] = ...) -> QtCore.QByteArray: ...
    def type(self) -> QtNetwork.QSsl.KeyType: ...

class QSslPreSharedKeyAuthenticator(Shiboken.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, authenticator: QtNetwork.QSslPreSharedKeyAuthenticator) -> None: ...
    @staticmethod
    def __copy__() -> None: ...
    def identity(self) -> QtCore.QByteArray: ...
    def identityHint(self) -> QtCore.QByteArray: ...
    def maximumIdentityLength(self) -> int: ...
    def maximumPreSharedKeyLength(self) -> int: ...
    def preSharedKey(self) -> QtCore.QByteArray: ...
    def setIdentity(self, identity: Union[QtCore.QByteArray, bytes]) -> None: ...
    def setPreSharedKey(self, preSharedKey: Union[QtCore.QByteArray, bytes]) -> None: ...
    def swap(self, other: QtNetwork.QSslPreSharedKeyAuthenticator) -> None: ...

class QSslServer(QtNetwork.QTcpServer):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def handshakeTimeout(self) -> int: ...
    def incomingConnection(self, socket: int) -> None: ...
    def setHandshakeTimeout(self, timeout: int) -> None: ...
    def setSslConfiguration(self, sslConfiguration: QtNetwork.QSslConfiguration) -> None: ...
    def sslConfiguration(self) -> QtNetwork.QSslConfiguration: ...

class QSslSocket(QtNetwork.QTcpSocket):
    class PeerVerifyMode(enum.Enum):

        VerifyNone: QSslSocket.PeerVerifyMode = ...  # 0x0
        QueryPeer: QSslSocket.PeerVerifyMode = ...  # 0x1
        VerifyPeer: QSslSocket.PeerVerifyMode = ...  # 0x2
        AutoVerifyPeer: QSslSocket.PeerVerifyMode = ...  # 0x3
    class SslMode(enum.Enum):

        UnencryptedMode: QSslSocket.SslMode = ...  # 0x0
        SslClientMode: QSslSocket.SslMode = ...  # 0x1
        SslServerMode: QSslSocket.SslMode = ...  # 0x2
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    @staticmethod
    def activeBackend() -> str: ...
    def atEnd(self) -> bool: ...
    @staticmethod
    def availableBackends() -> List[str]: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self) -> None: ...
    @overload
    def connectToHost(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    @overload
    def connectToHost(
        self,
        hostName: str,
        port: int,
        openMode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    @overload
    def connectToHostEncrypted(
        self,
        hostName: str,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    @overload
    def connectToHostEncrypted(
        self,
        hostName: str,
        port: int,
        sslPeerName: str,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    def continueInterruptedHandshake(self) -> None: ...
    def disconnectFromHost(self) -> None: ...
    def encryptedBytesAvailable(self) -> int: ...
    def encryptedBytesToWrite(self) -> int: ...
    @overload
    def ignoreSslErrors(self) -> None: ...
    @overload
    def ignoreSslErrors(self, errors: Sequence[QtNetwork.QSslError]) -> None: ...
    @staticmethod
    def implementedClasses(backendName: str = ...) -> List[QtNetwork.QSsl.ImplementedClass]: ...
    @staticmethod
    def isClassImplemented(cl: QtNetwork.QSsl.ImplementedClass, backendName: str = ...) -> bool: ...
    def isEncrypted(self) -> bool: ...
    @staticmethod
    def isFeatureSupported(
        feat: QtNetwork.QSsl.SupportedFeature, backendName: str = ...
    ) -> bool: ...
    @staticmethod
    def isProtocolSupported(
        protocol: QtNetwork.QSsl.SslProtocol, backendName: str = ...
    ) -> bool: ...
    def localCertificate(self) -> QtNetwork.QSslCertificate: ...
    def localCertificateChain(self) -> List[QtNetwork.QSslCertificate]: ...
    def mode(self) -> QtNetwork.QSslSocket.SslMode: ...
    def ocspResponses(self) -> List[QtNetwork.QOcspResponse]: ...
    def peerCertificate(self) -> QtNetwork.QSslCertificate: ...
    def peerCertificateChain(self) -> List[QtNetwork.QSslCertificate]: ...
    def peerVerifyDepth(self) -> int: ...
    def peerVerifyMode(self) -> QtNetwork.QSslSocket.PeerVerifyMode: ...
    def peerVerifyName(self) -> str: ...
    def privateKey(self) -> QtNetwork.QSslKey: ...
    def protocol(self) -> QtNetwork.QSsl.SslProtocol: ...
    def readData(self, maxlen: int) -> object: ...
    def resume(self) -> None: ...
    def sessionCipher(self) -> QtNetwork.QSslCipher: ...
    def sessionProtocol(self) -> QtNetwork.QSsl.SslProtocol: ...
    @staticmethod
    def setActiveBackend(backendName: str) -> bool: ...
    @overload
    def setLocalCertificate(
        self, certificate: Union[QtNetwork.QSslCertificate, QtCore.QIODevice]
    ) -> None: ...
    @overload
    def setLocalCertificate(
        self, fileName: str, format: QtNetwork.QSsl.EncodingFormat = ...
    ) -> None: ...
    def setLocalCertificateChain(self, localChain: Sequence[QtNetwork.QSslCertificate]) -> None: ...
    def setPeerVerifyDepth(self, depth: int) -> None: ...
    def setPeerVerifyMode(self, mode: QtNetwork.QSslSocket.PeerVerifyMode) -> None: ...
    def setPeerVerifyName(self, hostName: str) -> None: ...
    @overload
    def setPrivateKey(
        self,
        fileName: str,
        algorithm: QtNetwork.QSsl.KeyAlgorithm = ...,
        format: QtNetwork.QSsl.EncodingFormat = ...,
        passPhrase: Union[QtCore.QByteArray, bytes] = ...,
    ) -> None: ...
    @overload
    def setPrivateKey(self, key: Union[QtNetwork.QSslKey, int]) -> None: ...
    def setProtocol(self, protocol: QtNetwork.QSsl.SslProtocol) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: int,
        state: QtNetwork.QAbstractSocket.SocketState = ...,
        openMode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    def setSocketOption(
        self, option: QtNetwork.QAbstractSocket.SocketOption, value: Any
    ) -> None: ...
    def setSslConfiguration(self, config: QtNetwork.QSslConfiguration) -> None: ...
    def skipData(self, maxSize: int) -> int: ...
    def socketOption(self, option: QtNetwork.QAbstractSocket.SocketOption) -> Any: ...
    def sslConfiguration(self) -> QtNetwork.QSslConfiguration: ...
    def sslHandshakeErrors(self) -> List[QtNetwork.QSslError]: ...
    @staticmethod
    def sslLibraryBuildVersionNumber() -> int: ...
    @staticmethod
    def sslLibraryBuildVersionString() -> str: ...
    @staticmethod
    def sslLibraryVersionNumber() -> int: ...
    @staticmethod
    def sslLibraryVersionString() -> str: ...
    def startClientEncryption(self) -> None: ...
    def startServerEncryption(self) -> None: ...
    @staticmethod
    def supportedFeatures(backendName: str = ...) -> List[QtNetwork.QSsl.SupportedFeature]: ...
    @staticmethod
    def supportedProtocols(backendName: str = ...) -> List[QtNetwork.QSsl.SslProtocol]: ...
    @staticmethod
    def supportsSsl() -> bool: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForEncrypted(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, data: bytes, len: int) -> int: ...

class QTcpServer(QtCore.QObject):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    def addPendingConnection(self, socket: QtNetwork.QTcpSocket) -> None: ...
    def close(self) -> None: ...
    def errorString(self) -> str: ...
    def hasPendingConnections(self) -> bool: ...
    def incomingConnection(self, handle: int) -> None: ...
    def isListening(self) -> bool: ...
    def listen(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress] = ...,
        port: int = ...,
    ) -> bool: ...
    def listenBacklogSize(self) -> int: ...
    def maxPendingConnections(self) -> int: ...
    def nextPendingConnection(self) -> QtNetwork.QTcpSocket: ...
    def pauseAccepting(self) -> None: ...
    def proxy(self) -> QtNetwork.QNetworkProxy: ...
    def resumeAccepting(self) -> None: ...
    def serverAddress(self) -> QtNetwork.QHostAddress: ...
    def serverError(self) -> QtNetwork.QAbstractSocket.SocketError: ...
    def serverPort(self) -> int: ...
    def setListenBacklogSize(self, size: int) -> None: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def setProxy(
        self, networkProxy: Union[QtNetwork.QNetworkProxy, QtNetwork.QNetworkProxy.ProxyType]
    ) -> None: ...
    def setSocketDescriptor(self, socketDescriptor: int) -> bool: ...
    def socketDescriptor(self) -> int: ...
    def waitForNewConnection(self, msec: int) -> Tuple: ...

class QTcpSocket(QtNetwork.QAbstractSocket):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    @overload
    def bind(
        self,
        addr: QtNetwork.QHostAddress.SpecialAddress,
        port: int = ...,
        mode: QtNetwork.QAbstractSocket.BindFlag = ...,
    ) -> bool: ...
    @overload
    def bind(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int = ...,
        mode: QtNetwork.QAbstractSocket.BindFlag = ...,
    ) -> bool: ...
    @overload
    def bind(self, port: int = ..., mode: QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...

class QUdpSocket(QtNetwork.QAbstractSocket):
    def __init__(self, parent: Optional[QtCore.QObject] = ...) -> None: ...
    @overload
    def bind(
        self,
        addr: QtNetwork.QHostAddress.SpecialAddress,
        port: int = ...,
        mode: QtNetwork.QAbstractSocket.BindFlag = ...,
    ) -> bool: ...
    @overload
    def bind(
        self,
        address: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int = ...,
        mode: QtNetwork.QAbstractSocket.BindFlag = ...,
    ) -> bool: ...
    @overload
    def bind(self, port: int = ..., mode: QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    def hasPendingDatagrams(self) -> bool: ...
    @overload
    def joinMulticastGroup(
        self, groupAddress: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> bool: ...
    @overload
    def joinMulticastGroup(
        self,
        groupAddress: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        iface: QtNetwork.QNetworkInterface,
    ) -> bool: ...
    @overload
    def leaveMulticastGroup(
        self, groupAddress: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress]
    ) -> bool: ...
    @overload
    def leaveMulticastGroup(
        self,
        groupAddress: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        iface: QtNetwork.QNetworkInterface,
    ) -> bool: ...
    def multicastInterface(self) -> QtNetwork.QNetworkInterface: ...
    def pendingDatagramSize(self) -> int: ...
    def readDatagram(self, maxlen: int) -> Tuple: ...
    def receiveDatagram(self, maxSize: int = ...) -> QtNetwork.QNetworkDatagram: ...
    def setMulticastInterface(self, iface: QtNetwork.QNetworkInterface) -> None: ...
    @overload
    def writeDatagram(
        self,
        datagram: Union[QtCore.QByteArray, bytes],
        host: Union[QtNetwork.QHostAddress, QtNetwork.QHostAddress.SpecialAddress],
        port: int,
    ) -> int: ...
    @overload
    def writeDatagram(
        self, datagram: Union[QtNetwork.QNetworkDatagram, QtCore.QByteArray]
    ) -> int: ...

# eof
